!function(e){var t={};function n(i){if(t[i])return t[i].exports;var a=t[i]={i:i,l:!1,exports:{}};return e[i].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(i,a,function(t){return e[t]}.bind(null,a));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=3)}([function(e,t,n){e.exports=n.p+"285ae3239f1a614a5a05b4aa13ce31a5.png"},function(e,t,n){e.exports=n.p+"f6aa7f0421a5ce4cec7cc06690fd335e.png"},function(e,t,n){e.exports=n.p+"d0d8e021d0d023da65f4d5b5118f44dc.png"},function(e,t,n){"use strict";n.r(t);var i,a,s=function(){function e(){var e=this;this.animations=[],this.updates=[],this.resize=function(){console.log("canvas resizing"),e.canvas.width=e.canvas.clientWidth,e.canvas.height=e.canvas.clientHeight},this.isRunning=!1,this.addAnimation=function(t){e.animations.push(t)},this.removeAnimation=function(t){e.animations.splice(e.animations.indexOf(t),1)},this.addUpdate=function(t){e.updates.push(t)},this.removeUpdate=function(t){e.updates.splice(e.updates.indexOf(t),1)},this.addAnimatable=function(t){e.updates.push(t.update),e.animations.push(t.draw)},this.removeAnimatable=function(t){e.updates.splice(e.updates.indexOf(t.update),1),e.animations.splice(e.animations.indexOf(t.draw),1)},this.addView=function(t){e.addAnimatable(t),t.width=e.width,t.height=e.height},this.removeView=function(t){e.removeAnimatable(t)},this.fps=40,this.fpsInterval=1e3/this.fps,this.animate=function(){e.isRunning&&requestAnimationFrame(e.animate);var t=Date.now(),n=t-e.lastFrameTime;if(n>e.fpsInterval){e.lastFrameTime=t;for(var i=n/1e3,a=0,s=e.updates;a<s.length;a++){(0,s[a])(i)}e.ctx.clearRect(0,0,e.canvas.width,e.canvas.height);for(var r=0,o=e.animations;r<o.length;r++){(0,o[r])(e.ctx,e.canvas.width,e.canvas.height)}}}}return Object.defineProperty(e.prototype,"width",{get:function(){return this.canvas.width},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"height",{get:function(){return this.canvas.height},enumerable:!0,configurable:!0}),e.createInBody=function(){document.body.parentElement.style.height="100%",document.body.style.height="100%",document.body.style.margin="0",document.body.style.overflow="hidden";var t=document.createElement("canvas");document.body.appendChild(t),t.style.width="100%",t.style.height="100%";var n=new e;return n.canvas=t,n.ctx=t.getContext("2d"),document.addEventListener("keyup",function(e){80==e.keyCode&&n.playPause()}),n.startAnimation(),n.resize(),window.addEventListener("resize",n.resize),n},e.prototype.startAnimation=function(){console.log("start animation"),this.isRunning=!0,this.lastFrameTime=Date.now(),this.animate()},e.prototype.stopAnimation=function(){console.log("stop animation"),this.isRunning=!1},e.prototype.playPause=function(){this.isRunning?this.stopAnimation():this.startAnimation()},e}(),r=function(){return function(){var e=this;this.animations=[],this.updates=[],this.isVisible=!0,this.update=function(t){if(e.isVisible)for(var n=0,i=e.updates;n<i.length;n++)(0,i[n])(t)},this.draw=function(t,n,i){if(e.isVisible)for(var a=0,s=e.animations;a<s.length;a++)(0,s[a])(t,n,i)},this.show=function(){e.isVisible=!0},this.hide=function(){e.isVisible=!1},this.addAnimation=function(t){e.animations.push(t)},this.removeAnimation=function(t){e.animations.splice(e.animations.indexOf(t),1)},this.addUpdate=function(t){e.updates.push(t)},this.removeUpdate=function(t){e.updates.splice(e.updates.indexOf(t),1)},this.addAnimatable=function(t){e.updates.push(t.update),e.animations.push(t.draw)},this.removeAnimatable=function(t){e.updates.splice(e.updates.indexOf(t.update),1),e.animations.splice(e.animations.indexOf(t.draw),1)}}}();!function(e){e.start="start",e.left="left",e.up="up",e.right="right",e.down="down",e.a="a"}(i||(i={})),function(e){e.keyboard="keyboard",e.gamepad="gamepad"}(a||(a={}));var o,l=function(){return function(){var e=this;this.listeners=[],this.addEventListener=function(t){if(!t||e.listeners.indexOf(t)>=0)throw"listener already added";e.listeners.push(t)},this.dispatchEvent=function(){for(var t=0;t<e.listeners.length;t++)(0,e.listeners[t])()},this.removeEventListener=function(t){if(!t||e.listeners.indexOf(t)<0)throw"listener not found";e.listeners.splice(e.listeners.indexOf(t),1)}}}(),c=function(){return function(){var e=this;this.listeners=[],this.addEventListener=function(t){if(!t||e.listeners.indexOf(t)>=0)throw"listener already added";e.listeners.push(t)},this.dispatchEvent=function(t){for(var n=0;n<e.listeners.length;n++)(0,e.listeners[n])(t)},this.removeEventListener=function(t){if(!t||e.listeners.indexOf(t)<0)throw"listener not found";e.listeners.splice(e.listeners.indexOf(t),1)}}}(),d=function(){return function(){var e=this;this.listeners=[],this.addEventListener=function(t){if(!t||e.listeners.indexOf(t)>=0)throw"listener already added";e.listeners.push(t)},this.dispatchEvent=function(t,n){for(var i=0;i<e.listeners.length;i++)(0,e.listeners[i])(t,n)},this.removeEventListener=function(t){if(!t||e.listeners.indexOf(t)<0)throw"listener not found";e.listeners.splice(e.listeners.indexOf(t),1)}}}(),h=function(){return function(e,t,n,s,r,o){var l=this;this.name=e,this.type=a.keyboard,this.signal=new d,this.xAxes=0,this.yAxes=0,this.start=!1,document.addEventListener("keydown",function(e){e.keyCode==n&&(l.xAxes=-1,l.signal.dispatchEvent(l,i.left)),e.keyCode==t&&(l.yAxes=-1,l.signal.dispatchEvent(l,i.up)),e.keyCode==r&&(l.xAxes=1,l.signal.dispatchEvent(l,i.right)),e.keyCode==s&&(l.yAxes=1,l.signal.dispatchEvent(l,i.down)),13==e.keyCode&&(l.start=!0,l.signal.dispatchEvent(l,i.start)),e.keyCode==o&&(l.a=!0,l.signal.dispatchEvent(l,i.a))}),document.addEventListener("keyup",function(e){e.keyCode==n&&(l.xAxes=-1)&&(l.xAxes=0),e.keyCode==t&&(l.yAxes=-1)&&(l.yAxes=0),e.keyCode==r&&(l.xAxes=1)&&(l.xAxes=0),e.keyCode==s&&(l.yAxes=1)&&(l.yAxes=0),13==e.keyCode&&(l.start=!1),e.keyCode==o&&(l.a=!1)})}}(),u=function(){function e(){var e=this;this.gamepads=[],this.scangamepads=function(){for(var t=navigator.getGamepads?navigator.getGamepads():[],n=0;n<t.length;n++)t[n]&&!(t[n].index in e.gamepads)&&t[n].buttons.length>=16&&(e.gamepads[t[n].index]=t[n],e.scannedGamepad.dispatchEvent(t[n]))},this.scannedGamepad=new c,this.reset()}return e.prototype.start=function(){this.gamepadScanner=setInterval(this.scangamepads,500)},e.prototype.stop=function(){clearInterval(this.gamepadScanner)},e.prototype.reset=function(){this.gamepads=[]},e}(),f=function(){function e(e,t){var n=this;this.name=e,this.index=t,this.timeout=.5,this.signalingTimers={},this.signalListener=function(){requestAnimationFrame(n.signalListener);var e=Date.now();n.checkSignal(n.start,i.start,e),n.checkSignal(n.a,i.a,e),n.checkSignal(n.up,i.up,e),n.checkSignal(n.right,i.right,e),n.checkSignal(n.left,i.left,e),n.checkSignal(n.down,i.down,e),n.checkSignal(n.yAxes<-.5,i.up,e),n.checkSignal(n.yAxes>.5,i.down,e),n.checkSignal(n.xAxes<-.5,i.left,e),n.checkSignal(n.xAxes>.5,i.right,e)},this.checkSignal=function(e,t,i){e?n.signalingTimers[t]?(i-n.signalingTimers[t])/1e3>=n.timeout&&n.signal.dispatchEvent(n,t):(n.signalingTimers[t]=Date.now(),n.signal.dispatchEvent(n,t)):n.signalingTimers[t]=void 0},this.signal=new d,this.type=a.gamepad}return Object.defineProperty(e.prototype,"xAxes",{get:function(){return navigator.getGamepads()[this.index].axes[0]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"yAxes",{get:function(){return navigator.getGamepads()[this.index].axes[1]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"start",{get:function(){return navigator.getGamepads()[this.index].buttons[9].pressed},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"a",{get:function(){return navigator.getGamepads()[this.index].buttons[0].pressed},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"up",{get:function(){return navigator.getGamepads()[this.index].buttons[12].pressed},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"right",{get:function(){return navigator.getGamepads()[this.index].buttons[15].pressed},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"down",{get:function(){return navigator.getGamepads()[this.index].buttons[13].pressed},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"left",{get:function(){return navigator.getGamepads()[this.index].buttons[14].pressed},enumerable:!0,configurable:!0}),e.prototype.enableSignals=function(){this.signalListener()},e}(),p=n(0),m=n.n(p),g=n(1),y=n.n(g),v=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),x=function(e){function t(){var t=e.call(this)||this;t.options=[],t.controllers=[],t.drawOptions=function(e,n,i){if(!(t.controllers.length<=0))for(var a=i/2-32*t.options.length/2,s=0;s<t.options.length;s++){var r=t.options[s];e.fillStyle="black",e.textAlign="center",e.textBaseline="middle",e.font="22px sans-serif";var o=a+5+32*s;e.fillText(r,n/2,o),s===t.selectedOption&&e.strokeRect(n/2-e.measureText(r).width/2-5,o-11-5,e.measureText(r).width+10,32)}},t.drawControllers=function(e,n,i){for(var s=n/2-(15+75*t.controllers.length)/2,r=0;r<t.controllers.length;r++){e.fillStyle="hsl("+r/t.controllers.length*360+",100%, 40%)";var o=s+15+75*r;switch(t.controllers[r].type){case a.gamepad:e.font="60px FontAwesome",e.fillText("",o,i/4);break;case a.keyboard:e.font="60px FontAwesome",e.fillText("",o,i/4)}}},t.addController=function(e){e.type==a.gamepad&&e.enableSignals(),e.signal.addEventListener(t.controllerSignal)},t.controllerSignal=function(e,n){if(n==i.start)t.controllers.indexOf(e)>=0?t.controllers.splice(t.controllers.indexOf(e),1):t.controllers.push(e);else if(t.controllers.length>0&&t.controllers[0]==e)switch(n){case i.down:t.selectedOption++,t.selectedOption>=t.options.length&&(t.selectedOption=0);break;case i.up:t.selectedOption--,t.selectedOption<0&&(t.selectedOption=t.options.length-1);break;case i.a:switch(t.selectedOption){case 0:t.gamepadScanner.stop(),t.requestStart.dispatchEvent();break;case 1:t.showControls=!t.showControls}}},t.requestStart=new l,t.options=["Start Game","Show / Hide Controls"],t.selectedOption=0,t.showControls=!0,t.controls_gamepad_image=new Image,t.controls_gamepad_image.src=m.a,t.controls_keyboard_image=new Image,t.controls_keyboard_image.src=y.a,t.addAnimation(function(e,n,i){if(t.showControls){var a=n/3,s=a/t.controls_gamepad_image.naturalWidth*t.controls_gamepad_image.naturalHeight;e.drawImage(t.controls_gamepad_image,a-a/2,3*i/4-s/2,a,s),s=a/t.controls_keyboard_image.naturalWidth*t.controls_keyboard_image.naturalHeight,e.drawImage(t.controls_keyboard_image,2*a-a/2,3*i/4-s/2,a,s)}}),t.addAnimation(t.drawOptions),t.addAnimation(t.drawControllers),t.gamepadScanner=new u,t.gamepadScanner.scannedGamepad.addEventListener(function(e){t.addController(new f(e.index.toString(),e.index))}),t.gamepadScanner.start();var n=new h("arrows",38,37,40,39,32);return t.addController(n),t}return v(t,e),t}(r);!function(e){e[e.up=0]="up",e[e.right=1]="right",e[e.down=2]="down",e[e.left=3]="left"}(o||(o={}));var w=function(){function e(e,t,n){var a=this;this.fieldSize=e,this.controller=t,this.playerNumber=n,this.parts=[],this.collectedSomething=function(e){a.points+=2*e,a.addPart=!0},this.finish=function(){a.isDone=!0,a.points=a.points-8},this.controllerSignal=function(e,t){switch(t){case i.up:a.direction!=o.down&&(a.nextDirection=o.up);break;case i.right:a.direction!=o.left&&(a.nextDirection=o.right);break;case i.down:a.direction!=o.up&&(a.nextDirection=o.down);break;case i.left:a.direction!=o.right&&(a.nextDirection=o.left)}},this.tick=function(){if(!a.isDone){a.direction=a.nextDirection;var e=a.parts[a.parts.length-1];switch(a.direction){case o.up:a.parts.push({x:e.x,y:e.y-1});break;case o.right:a.parts.push({x:e.x+1,y:e.y});break;case o.down:a.parts.push({x:e.x,y:e.y+1});break;case o.left:a.parts.push({x:e.x-1,y:e.y})}a.addPart?a.addPart=!1:a.parts.shift()}},this.update=function(e){},this.draw=function(e,t,n){var i=t/(30*a.fieldSize),s=n/i,r=n/(s=Math.ceil(s)),o=30/a.parts.length;e.fillStyle=a.color;for(var l=0;l<a.parts.length;l++){a.isDone?e.fillStyle="hsl("+360*a.playerNumber+",100%, 30%)":e.fillStyle="hsl("+360*a.playerNumber+",100%, "+(30+o*l)+"%)";var c=a.parts[l];e.fillRect(c.x*i,c.y*r,i,r)}e.textAlign="start",e.textBaseline="top",e.font="60px sans-serif",e.fillStyle="hsl("+360*a.playerNumber+",100%, 50%)",e.fillText(a.points.toString(),t*a.playerNumber,10)},this.direction=o.right,this.points=0,this.nextDirection=this.direction,this.isDone=!1,this.color="hsl("+360*n+",100%, 30%)";for(var s=0;s<7;s++)this.parts.push({x:3+s,y:1+Math.round(20*n)});t.signal.addEventListener(this.controllerSignal),this.iMDone=new l,this.collected=new c,this.collected.addEventListener(this.collectedSomething),this.iMDone.addEventListener(this.finish)}return Object.defineProperty(e.prototype,"headPart",{get:function(){return this.parts[this.parts.length-1]},enumerable:!0,configurable:!0}),e}(),b=n(2),k=n.n(b),S=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),O=function(e){function t(t){var n=e.call(this)||this;return n.controllers=t,n.snakes=[],n.fpsInterval=300,n.items=[],n.snakeIsDone=function(){0==n.snakes.map(function(e){return e.isDone}).filter(function(e){return!e}).length&&n.gameFinishedMethod()},n.gameFinishedMethod=function(){n.gameFinished=!0,setTimeout(function(){n.allowNewGame=!0},3e3),n.snakes=n.snakes.sort(function(e,t){return t.points-e.points}),n.addAnimation(function(e,t,i){e.fillStyle="rgba(255, 255, 255, 0.8)",e.fillRect(0,0,t,i);for(var a=0;a<n.snakes.length;a++){var s=n.snakes[a];e.textAlign="center",e.textBaseline="top",e.fillStyle="hsl("+360*s.playerNumber+",100%, 50%)";var r=t*s.playerNumber+t*(1/n.snakes.length)/2;if(s.isDone){var o=t/n.snakes.length/4,l=o/n.deathImage.naturalWidth*n.deathImage.naturalHeight;e.drawImage(n.deathImage,r-o/2,i/2-80-l-20,o,l)}e.font="50px sans-serif",e.fillText("Score: "+s.points.toString(),r,i/2-80),e.font=60+20*(n.snakes.length-a)+"px sans-serif",e.fillStyle="hsl("+360*s.playerNumber+",100%, 50%)",e.fillText((a+1).toString()+".",r,i/2)}n.allowNewGame&&(e.textAlign="center",e.textBaseline="top",e.fillStyle="black",e.font="50px sans-serif",e.fillText("Press a button to start a new game.",t/2,i/4*3))})},n.update=function(e){if(!n.gameFinished){var t=Date.now();if(t-n.lastFrameTime>n.fpsInterval){if(n.lastFrameTime=t,n.items.length<n.maxItems)if(0==n.currentItemSpawnDelay){n.currentItemSpawnDelay=n.itemSpawnerDelay;var i=!0,a=20;do{i=!0;for(var s=Math.floor(Math.random()*n.numberOfBlocksX),r=Math.floor(Math.random()*n.numberOfBlocksY),o=0;o<n.snakes.length&&i;o++)for(var l=n.snakes[o],c=0;c<l.parts.length&&i;c++){(f=l.parts[c]).x==s&&f.y==r&&(i=!1)}a--,i&&n.items.push({x:s,y:r,weight:(Math.floor(2*Math.random())+1)/2,drawStart:Math.random()*Math.PI*2})}while(!i&&a>0)}else n.currentItemSpawnDelay--;for(o=0;o<n.snakes.length;o++){(l=n.snakes[o]).tick()}for(o=0;o<n.snakes.length;o++){var d=n.snakes[o];if(!d.isDone){(d.headPart.x<0||d.headPart.y<0||d.headPart.x>=n.numberOfBlocksX||d.headPart.y>=n.numberOfBlocksY)&&d.iMDone.dispatchEvent();for(c=0;c<n.snakes.length;c++)for(var h=d!=(w=n.snakes[c])?w.parts.length:w.parts.length-1,u=0;u<h;u++){var f;(f=w.parts[u]).x==d.headPart.x&&f.y==d.headPart.y&&d.iMDone.dispatchEvent()}var p=[];for(c=0;c<n.items.length;c++){var m=n.items[c];m.x==d.headPart.x&&m.y==d.headPart.y&&(p.push(c),d.collected.dispatchEvent(m.weight))}for(var g=0;g<p.length;g++){var y=p[g];n.items.splice(y,1)}}}var v=!0,x=n.snakes.filter(function(e){return!e.isDone});if(1==x.length&&n.snakes.length>1){for(o=0;o<n.snakes.length;o++){var w;(w=n.snakes[o])!=x[0]&&w.points>=x[0].points&&(v=!1)}v&&n.gameFinishedMethod()}}}},n.animation=function(e,t,i){for(var a=t/n.numberOfBlocksX,s=i/n.numberOfBlocksY,r=0;r<n.items.length;r++){var o=n.items[r];e.fillStyle="black",e.beginPath(),e.arc(o.x*a+a/2,o.y*s+s/2,a/3,o.drawStart,o.drawStart+2*Math.PI*o.weight),e.fill()}n.numberOfBlocksX=30*n.fieldSize,a=t/n.numberOfBlocksX,n.numberOfBlocksY=Math.ceil(i/a)},n.requestNewGame=new l,n}return S(t,e),t.prototype.start=function(){var e=this;this.deathImage=new Image,this.deathImage.src=k.a,this.fieldSize=1,this.itemSpawnerDelay=5,this.currentItemSpawnDelay=this.itemSpawnerDelay,this.maxItems=3;for(var t=0;t<this.controllers.length;t++){var n=this.controllers[t],a=new w(this.fieldSize,n,t/this.controllers.length);this.addAnimatable(a),a.iMDone.addEventListener(this.snakeIsDone),this.snakes.push(a)}this.lastFrameTime=Date.now(),this.addUpdate(this.update),this.addAnimation(this.animation);for(t=0;t<this.controllers.length;t++){(n=this.controllers[t]).signal.addEventListener(function(t,n){e.gameFinished&&e.allowNewGame&&(n!=i.a&&n!=i.start||e.requestNewGame.dispatchEvent())})}},t}(r),A=function(){function e(){var e=this;this.start=function(){e.game=new O(e.menu.controllers),e.menu.hide(),e.menu.requestStart.removeEventListener(e.start),e.menu=null,e.animation.addView(e.game),e.game.requestNewGame.addEventListener(e.newGame),e.game.start()},this.newGame=function(){e.menu=new x,e.menu.requestStart.addEventListener(e.start),e.game&&(e.game.requestNewGame.removeEventListener(e.newGame),e.game.hide(),e.game=null),e.animation.addView(e.menu),e.menu.show()}}return e.prototype.run=function(){this.animation=s.createInBody(),this.newGame()},e}();document.addEventListener("DOMContentLoaded",function(){(new A).run()},!1)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Fzc2V0cy9jb250cm9sc19nYW1lcGFkLnBuZyIsIndlYnBhY2s6Ly8vLi9zcmMvYXNzZXRzL2NvbnRyb2xzX2tleWJvYXJkLnBuZyIsIndlYnBhY2s6Ly8vLi9zcmMvYXNzZXRzL3NrdWxsLWFuZC1jcm9zc2JvbmVzLnBuZyIsIndlYnBhY2s6Ly8vLi9zcmMvZW5jL2FuaW1hdGlvbi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZW5jL2NvbnRyb2xsZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2VuYy92aWV3LnRzIiwid2VicGFjazovLy8uL3NyYy9lbmMvZUV2ZW50LnRzIiwid2VicGFjazovLy8uL3NyYy9zbmFrZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZW5jL2tleWJvYXJkQ29udHJvbHMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2VuYy9nYW1lcGFkU2Nhbm5lci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZW5jL2dhbWVwYWRDb250cm9scy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbWFpbk1lbnVWaWV3LnRzIiwid2VicGFjazovLy8uL3NyYy9nYW1lVmlldy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwLnRzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC50cyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIlNpZ25hbHMiLCJDb250cm9sbGVyVHlwZSIsIkFuaW1hdGlvbiIsIl90aGlzIiwidGhpcyIsImFuaW1hdGlvbnMiLCJ1cGRhdGVzIiwicmVzaXplIiwiY29uc29sZSIsImxvZyIsImNhbnZhcyIsIndpZHRoIiwiY2xpZW50V2lkdGgiLCJoZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJpc1J1bm5pbmciLCJhZGRBbmltYXRpb24iLCJmdW5jIiwicHVzaCIsInJlbW92ZUFuaW1hdGlvbiIsInNwbGljZSIsImluZGV4T2YiLCJhZGRVcGRhdGUiLCJyZW1vdmVVcGRhdGUiLCJhZGRBbmltYXRhYmxlIiwiYW5pbWF0YWJsZSIsInVwZGF0ZSIsImRyYXciLCJyZW1vdmVBbmltYXRhYmxlIiwiYWRkVmlldyIsInZpZXciLCJyZW1vdmVWaWV3IiwiZnBzIiwiZnBzSW50ZXJ2YWwiLCJhbmltYXRlIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibm93IiwiRGF0ZSIsImVsYXBzZWQiLCJsYXN0RnJhbWVUaW1lIiwidGltZURpZmYiLCJfaSIsIl9hIiwibGVuZ3RoIiwiY3R4IiwiY2xlYXJSZWN0IiwiX2IiLCJfYyIsImNyZWF0ZUluQm9keSIsImRvY3VtZW50IiwiYm9keSIsInBhcmVudEVsZW1lbnQiLCJzdHlsZSIsIm1hcmdpbiIsIm92ZXJmbG93IiwiY3JlYXRlRWxlbWVudCIsImFwcGVuZENoaWxkIiwiYW5pbWF0aW9uIiwiZ2V0Q29udGV4dCIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsImtleUNvZGUiLCJwbGF5UGF1c2UiLCJzdGFydEFuaW1hdGlvbiIsIndpbmRvdyIsInN0b3BBbmltYXRpb24iLCJWaWV3IiwiaXNWaXNpYmxlIiwic2hvdyIsImhpZGUiLCJEaXJlY3Rpb24iLCJFRXZlbnQiLCJsaXN0ZW5lcnMiLCJsaXN0ZW5lciIsImRpc3BhdGNoRXZlbnQiLCJldmVudF8xIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIkVFdmVudFQiLCJhcmciLCJldmVudF8yIiwiRUV2ZW50VFQiLCJhcmcxIiwiYXJnMiIsImV2ZW50XzMiLCJrZXlib2FyZENvbnRyb2xzX0tleWJvYXJkQ29udHJvbHMiLCJ1cEtleSIsImxlZnRLZXkiLCJkb3duS2V5IiwicmlnaHRLZXkiLCJhIiwidHlwZSIsImtleWJvYXJkIiwic2lnbmFsIiwieEF4ZXMiLCJ5QXhlcyIsInN0YXJ0IiwibGVmdCIsInVwIiwicmlnaHQiLCJkb3duIiwiZ2FtZXBhZFNjYW5uZXJfR2FtZXBhZFNjYW5uZXIiLCJHYW1lcGFkU2Nhbm5lciIsImdhbWVwYWRzIiwic2NhbmdhbWVwYWRzIiwibmF2aWdhdG9yIiwiZ2V0R2FtZXBhZHMiLCJpbmRleCIsImJ1dHRvbnMiLCJzY2FubmVkR2FtZXBhZCIsInJlc2V0IiwiZ2FtZXBhZFNjYW5uZXIiLCJzZXRJbnRlcnZhbCIsInN0b3AiLCJjbGVhckludGVydmFsIiwiZ2FtZXBhZENvbnRyb2xzX0dhbWVwYWRDb250cm9scyIsIkdhbWVwYWRDb250cm9scyIsInRpbWVvdXQiLCJzaWduYWxpbmdUaW1lcnMiLCJzaWduYWxMaXN0ZW5lciIsImNoZWNrU2lnbmFsIiwiaXNQcmVzc2VkIiwidW5kZWZpbmVkIiwiZ2FtZXBhZCIsImF4ZXMiLCJwcmVzc2VkIiwiZW5hYmxlU2lnbmFscyIsIm1haW5NZW51Vmlld19NYWluTWVudVZpZXciLCJfc3VwZXIiLCJNYWluTWVudVZpZXciLCJvcHRpb25zIiwiY29udHJvbGxlcnMiLCJkcmF3T3B0aW9ucyIsInN0YXJ0SGVpZ2h0Iiwib3B0aW9uIiwiZmlsbFN0eWxlIiwidGV4dEFsaWduIiwidGV4dEJhc2VsaW5lIiwiZm9udCIsIm9wdGlvbkhlaWdodCIsImZpbGxUZXh0Iiwic2VsZWN0ZWRPcHRpb24iLCJzdHJva2VSZWN0IiwibWVhc3VyZVRleHQiLCJmb250U2l6ZSIsImRyYXdDb250cm9sbGVycyIsInN0YXJ0WCIsIngiLCJhZGRDb250cm9sbGVyIiwiY29udHJvbGxlciIsImNvbnRyb2xsZXJTaWduYWwiLCJzZW5kZXIiLCJyZXF1ZXN0U3RhcnQiLCJzaG93Q29udHJvbHMiLCJjb250cm9sc19nYW1lcGFkX2ltYWdlIiwiSW1hZ2UiLCJzcmMiLCJjb250cm9sc19nYW1lcGFkX2RlZmF1bHQiLCJjb250cm9sc19rZXlib2FyZF9pbWFnZSIsImNvbnRyb2xzX2tleWJvYXJkX2RlZmF1bHQiLCJuZXdXaWR0aCIsIm5ld0hlaWdodCIsIm5hdHVyYWxXaWR0aCIsIm5hdHVyYWxIZWlnaHQiLCJkcmF3SW1hZ2UiLCJ0b1N0cmluZyIsIl9fZXh0ZW5kcyIsInNuYWtlX1NuYWtlIiwiU25ha2UiLCJmaWVsZFNpemUiLCJwbGF5ZXJOdW1iZXIiLCJwYXJ0cyIsImNvbGxlY3RlZFNvbWV0aGluZyIsIndlaWdodCIsInBvaW50cyIsImFkZFBhcnQiLCJmaW5pc2giLCJpc0RvbmUiLCJkaXJlY3Rpb24iLCJuZXh0RGlyZWN0aW9uIiwidGljayIsImN1cnJlbnQiLCJ5Iiwic2hpZnQiLCJmaWVsZFNpemVYIiwibnVtYmVyT2ZCbG9ja3NZIiwiZmllbGRTaXplWSIsIk1hdGgiLCJjZWlsIiwiY29sb3JHcmFkaWVudCIsImNvbG9yIiwicGFydCIsImZpbGxSZWN0Iiwicm91bmQiLCJpTURvbmUiLCJjb2xsZWN0ZWQiLCJnYW1lVmlld19HYW1lVmlldyIsIkdhbWVWaWV3Iiwic25ha2VzIiwiaXRlbXMiLCJzbmFrZUlzRG9uZSIsIm1hcCIsImZpbHRlciIsImdhbWVGaW5pc2hlZE1ldGhvZCIsImdhbWVGaW5pc2hlZCIsInNldFRpbWVvdXQiLCJhbGxvd05ld0dhbWUiLCJzb3J0IiwiczEiLCJzMiIsInNuYWtlIiwiZGVhdGhJbWFnZSIsIm1heEl0ZW1zIiwiY3VycmVudEl0ZW1TcGF3bkRlbGF5IiwiaXRlbVNwYXduZXJEZWxheSIsImZvdW5kSXRlbSIsIm1heEl0ZXJhdGlvbnMiLCJpdGVtWCIsImZsb29yIiwicmFuZG9tIiwibnVtYmVyT2ZCbG9ja3NYIiwiaXRlbVkiLCJqIiwiZHJhd1N0YXJ0IiwiUEkiLCJzbmFrZTEiLCJoZWFkUGFydCIsImxlbmd0aF8xIiwic25ha2UyIiwiayIsImNvbGxlY3RlZEl0ZW1JbmRpY2VzIiwiaXRlbSIsImlfMSIsIml0ZW1JbmRleCIsImlzRmlyc3QiLCJzbmFrZXNBbGl2ZSIsImJlZ2luUGF0aCIsImFyYyIsImZpbGwiLCJyZXF1ZXN0TmV3R2FtZSIsImdhbWVWaWV3X2V4dGVuZHMiLCJza3VsbF9hbmRfY3Jvc3Nib25lc19kZWZhdWx0IiwiYXBwX0FwcCIsIkFwcCIsImdhbWUiLCJtZW51IiwibmV3R2FtZSIsInJ1biJdLCJtYXBwaW5ncyI6ImFBQ0EsSUFBQUEsS0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxJQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFlBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUYsR0FHQUcsRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQUtBRixFQUFBUSxFQUFBRixFQUdBTixFQUFBUyxFQUFBVixFQUdBQyxFQUFBVSxFQUFBLFNBQUFSLEVBQUFTLEVBQUFDLEdBQ0FaLEVBQUFhLEVBQUFYLEVBQUFTLElBQ0FHLE9BQUFDLGVBQUFiLEVBQUFTLEdBQTBDSyxZQUFBLEVBQUFDLElBQUFMLEtBSzFDWixFQUFBa0IsRUFBQSxTQUFBaEIsR0FDQSxvQkFBQWlCLGVBQUFDLGFBQ0FOLE9BQUFDLGVBQUFiLEVBQUFpQixPQUFBQyxhQUF3REMsTUFBQSxXQUV4RFAsT0FBQUMsZUFBQWIsRUFBQSxjQUFpRG1CLE9BQUEsS0FRakRyQixFQUFBc0IsRUFBQSxTQUFBRCxFQUFBRSxHQUVBLEdBREEsRUFBQUEsSUFBQUYsRUFBQXJCLEVBQUFxQixJQUNBLEVBQUFFLEVBQUEsT0FBQUYsRUFDQSxLQUFBRSxHQUFBLGlCQUFBRixRQUFBRyxXQUFBLE9BQUFILEVBQ0EsSUFBQUksRUFBQVgsT0FBQVksT0FBQSxNQUdB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UCxFQUFLaVAsS0FBTyxJQUFJdEgsRUFDaEIzSCxFQUFLaVAsS0FBSzdGLGFBQWE1RixpQkFBaUJ4RCxFQUFLNEYsT0FDekM1RixFQUFLZ1AsT0FDTGhQLEVBQUtnUCxLQUFLTCxlQUFlbEssb0JBQW9CekUsRUFBS2tQLFNBQ2xEbFAsRUFBS2dQLEtBQUs5SyxPQUNWbEUsRUFBS2dQLEtBQU8sTUFHaEJoUCxFQUFLc0QsVUFBVTVCLFFBQVExQixFQUFLaVAsTUFDNUJqUCxFQUFLaVAsS0FBS2hMLFFBRWxCLE9BNUJXOEssRUFBQXRQLFVBQUEwUCxJQUFQLFdBQ0lsUCxLQUFLcUQsVUFBWXZELEVBQVU4QyxlQUMzQjVDLEtBQUtpUCxXQTBCYkgsRUFqQ0EsR0NIQWpNLFNBQVNVLGlCQUFpQixtQkFFMUIsWUFDYyxJQUFJc0wsR0FDWkssUUFKOEMiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAzKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjI4NWFlMzIzOWYxYTYxNGE1YTA1YjRhYTEzY2UzMWE1LnBuZ1wiOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImY2YWE3ZjA0MjFhNWNlNGNlYzdjYzA2NjkwZmQzMzVlLnBuZ1wiOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImQwZDhlMDIxZDBkMDIzZGE2NWY0ZDViNTExOGY0NGRjLnBuZ1wiOyIsImltcG9ydCB7IFZpZXcgfSBmcm9tIFwiLi92aWV3XCI7XHJcblxyXG5leHBvcnQgdHlwZSBBbmltYXRpb25GdW5jdGlvbiA9IChjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgd2lkdGg/OiBudW1iZXIsIGhlaWdodD86IG51bWJlcikgPT4gdm9pZDtcclxuZXhwb3J0IHR5cGUgVXBkYXRlRnVuY3Rpb24gPSAodGltZURpZmY6IG51bWJlcikgPT4gdm9pZDtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQW5pbWF0YWJsZSB7XHJcbiAgICB1cGRhdGU6IFVwZGF0ZUZ1bmN0aW9uO1xyXG4gICAgZHJhdzogQW5pbWF0aW9uRnVuY3Rpb247XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBBbmltYXRpb24ge1xyXG4gICAgcHJpdmF0ZSBjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50O1xyXG4gICAgcHJpdmF0ZSBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtcclxuICAgIHByaXZhdGUgYW5pbWF0aW9uczogQW5pbWF0aW9uRnVuY3Rpb25bXSA9IFtdO1xyXG4gICAgcHJpdmF0ZSB1cGRhdGVzOiBVcGRhdGVGdW5jdGlvbltdID0gW107XHJcblxyXG4gICAgcHVibGljIGdldCB3aWR0aCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNhbnZhcy53aWR0aDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IGhlaWdodCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNhbnZhcy5oZWlnaHQ7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHByaXZhdGUgY29uc3RydWN0b3IoKSB7IH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZUluQm9keSgpOiBBbmltYXRpb24ge1xyXG4gICAgICAgIGRvY3VtZW50LmJvZHkucGFyZW50RWxlbWVudC5zdHlsZS5oZWlnaHQgPSBcIjEwMCVcIjtcclxuICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLmhlaWdodCA9IFwiMTAwJVwiO1xyXG4gICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUubWFyZ2luID0gXCIwXCI7XHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XHJcblxyXG4gICAgICAgIHZhciBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcclxuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNhbnZhcyk7XHJcbiAgICAgICAgY2FudmFzLnN0eWxlLndpZHRoID0gXCIxMDAlXCJcclxuICAgICAgICBjYW52YXMuc3R5bGUuaGVpZ2h0ID0gXCIxMDAlXCI7XHJcblxyXG4gICAgICAgIHZhciBhbmltYXRpb24gPSBuZXcgQW5pbWF0aW9uKCk7XHJcbiAgICAgICAgYW5pbWF0aW9uLmNhbnZhcyA9IGNhbnZhcztcclxuICAgICAgICBhbmltYXRpb24uY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcblxyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChldmVudC5rZXlDb2RlID09IDgwKSB7IC8vIHBcclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbi5wbGF5UGF1c2UoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBhbmltYXRpb24uc3RhcnRBbmltYXRpb24oKTtcclxuICAgICAgICBhbmltYXRpb24ucmVzaXplKCk7XHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgYW5pbWF0aW9uLnJlc2l6ZSk7XHJcbiAgICAgICAgcmV0dXJuIGFuaW1hdGlvbjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmVzaXplID0gKCkgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiY2FudmFzIHJlc2l6aW5nXCIpO1xyXG5cclxuICAgICAgICB0aGlzLmNhbnZhcy53aWR0aCA9IHRoaXMuY2FudmFzLmNsaWVudFdpZHRoO1xyXG4gICAgICAgIHRoaXMuY2FudmFzLmhlaWdodCA9IHRoaXMuY2FudmFzLmNsaWVudEhlaWdodDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhcnRBbmltYXRpb24oKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJzdGFydCBhbmltYXRpb25cIik7XHJcblxyXG4gICAgICAgIHRoaXMuaXNSdW5uaW5nID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmxhc3RGcmFtZVRpbWUgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgIHRoaXMuYW5pbWF0ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaXNSdW5uaW5nID0gZmFsc2U7XHJcbiAgICBwdWJsaWMgc3RvcEFuaW1hdGlvbigpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcInN0b3AgYW5pbWF0aW9uXCIpO1xyXG5cclxuICAgICAgICB0aGlzLmlzUnVubmluZyA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHBsYXlQYXVzZSgpIHtcclxuICAgICAgICB0aGlzLmlzUnVubmluZyA/IHRoaXMuc3RvcEFuaW1hdGlvbigpIDogdGhpcy5zdGFydEFuaW1hdGlvbigpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhZGRBbmltYXRpb24gPSAoZnVuYzogQW5pbWF0aW9uRnVuY3Rpb24pID0+IHtcclxuICAgICAgICB0aGlzLmFuaW1hdGlvbnMucHVzaChmdW5jKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmVtb3ZlQW5pbWF0aW9uID0gKGZ1bmM6IEFuaW1hdGlvbkZ1bmN0aW9uKSA9PiB7XHJcbiAgICAgICAgdGhpcy5hbmltYXRpb25zLnNwbGljZSh0aGlzLmFuaW1hdGlvbnMuaW5kZXhPZihmdW5jKSwgMSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFkZFVwZGF0ZSA9IChmdW5jOiBVcGRhdGVGdW5jdGlvbikgPT4ge1xyXG4gICAgICAgIHRoaXMudXBkYXRlcy5wdXNoKGZ1bmMpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyByZW1vdmVVcGRhdGUgPSAoZnVuYzogVXBkYXRlRnVuY3Rpb24pID0+IHtcclxuICAgICAgICB0aGlzLnVwZGF0ZXMuc3BsaWNlKHRoaXMudXBkYXRlcy5pbmRleE9mKGZ1bmMpLCAxKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYWRkQW5pbWF0YWJsZSA9IChhbmltYXRhYmxlOiBBbmltYXRhYmxlKSA9PiB7XHJcbiAgICAgICAgdGhpcy51cGRhdGVzLnB1c2goYW5pbWF0YWJsZS51cGRhdGUpO1xyXG4gICAgICAgIHRoaXMuYW5pbWF0aW9ucy5wdXNoKGFuaW1hdGFibGUuZHJhdyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlbW92ZUFuaW1hdGFibGUgPSAoYW5pbWF0YWJsZTogQW5pbWF0YWJsZSkgPT4ge1xyXG4gICAgICAgIHRoaXMudXBkYXRlcy5zcGxpY2UodGhpcy51cGRhdGVzLmluZGV4T2YoYW5pbWF0YWJsZS51cGRhdGUpLCAxKTtcclxuICAgICAgICB0aGlzLmFuaW1hdGlvbnMuc3BsaWNlKHRoaXMuYW5pbWF0aW9ucy5pbmRleE9mKGFuaW1hdGFibGUuZHJhdyksIDEpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhZGRWaWV3ID0gKHZpZXc6IFZpZXcpID0+IHtcclxuICAgICAgICB0aGlzLmFkZEFuaW1hdGFibGUodmlldyk7XHJcbiAgICAgICAgdmlldy53aWR0aCA9IHRoaXMud2lkdGg7XHJcbiAgICAgICAgdmlldy5oZWlnaHQgPSB0aGlzLmhlaWdodDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmVtb3ZlVmlldyA9ICh2aWV3OiBWaWV3KSA9PiB7XHJcbiAgICAgICAgdGhpcy5yZW1vdmVBbmltYXRhYmxlKHZpZXcpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgbGFzdEZyYW1lVGltZTogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBmcHMgPSA0MDtcclxuICAgIHByaXZhdGUgZnBzSW50ZXJ2YWwgPSAxMDAwIC8gdGhpcy5mcHM7XHJcblxyXG4gICAgcHJpdmF0ZSBhbmltYXRlID0gKCkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLmlzUnVubmluZykge1xyXG4gICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5hbmltYXRlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBub3cgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgIHZhciBlbGFwc2VkID0gbm93IC0gdGhpcy5sYXN0RnJhbWVUaW1lO1xyXG5cclxuICAgICAgICBpZiAoZWxhcHNlZCA+IHRoaXMuZnBzSW50ZXJ2YWwpIHtcclxuICAgICAgICAgICAgdGhpcy5sYXN0RnJhbWVUaW1lID0gbm93O1xyXG4gICAgICAgICAgICB2YXIgdGltZURpZmYgPSBlbGFwc2VkIC8gMTAwMDtcclxuXHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgdXBkYXRlIG9mIHRoaXMudXBkYXRlcykge1xyXG4gICAgICAgICAgICAgICAgdXBkYXRlKHRpbWVEaWZmKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5jdHguY2xlYXJSZWN0KDAsIDAsIHRoaXMuY2FudmFzLndpZHRoLCB0aGlzLmNhbnZhcy5oZWlnaHQpO1xyXG5cclxuICAgICAgICAgICAgZm9yIChjb25zdCBhbmltYXRlIG9mIHRoaXMuYW5pbWF0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgYW5pbWF0ZSh0aGlzLmN0eCwgdGhpcy5jYW52YXMud2lkdGgsIHRoaXMuY2FudmFzLmhlaWdodCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBFRXZlbnRUVCB9IGZyb20gXCIuL2VFdmVudFwiO1xyXG5cclxuZXhwb3J0IGVudW0gU2lnbmFscyB7XHJcbiAgICBzdGFydCA9IFwic3RhcnRcIixcclxuICAgIGxlZnQgPSBcImxlZnRcIixcclxuICAgIHVwID0gXCJ1cFwiLFxyXG4gICAgcmlnaHQgPSBcInJpZ2h0XCIsXHJcbiAgICBkb3duID0gXCJkb3duXCIsXHJcbiAgICBhID0gXCJhXCJcclxufVxyXG5cclxuZXhwb3J0IGVudW0gQ29udHJvbGxlclR5cGUge1xyXG4gICAga2V5Ym9hcmQgPSBcImtleWJvYXJkXCIsXHJcbiAgICBnYW1lcGFkID0gXCJnYW1lcGFkXCJcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBDb250cm9sbGVyIHtcclxuICAgIHhBeGVzOiBudW1iZXI7XHJcbiAgICB5QXhlczogbnVtYmVyO1xyXG4gICAgbmFtZTogc3RyaW5nO1xyXG5cclxuICAgIHN0YXJ0OiBib29sZWFuO1xyXG4gICAgYTogYm9vbGVhbjtcclxuXHJcbiAgICBzaWduYWw6IEVFdmVudFRUPENvbnRyb2xsZXIsIHN0cmluZz47XHJcbiAgICB0eXBlOiBDb250cm9sbGVyVHlwZVxyXG59IiwiaW1wb3J0IHsgQW5pbWF0aW9uRnVuY3Rpb24sIFVwZGF0ZUZ1bmN0aW9uLCBBbmltYXRhYmxlLCBBbmltYXRpb24gfSBmcm9tIFwiLi9hbmltYXRpb25cIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBWaWV3IGltcGxlbWVudHMgQW5pbWF0YWJsZSB7XHJcbiAgICBwdWJsaWMgYW5pbWF0aW9uczogQW5pbWF0aW9uRnVuY3Rpb25bXSA9IFtdO1xyXG4gICAgcHVibGljIHVwZGF0ZXM6IFVwZGF0ZUZ1bmN0aW9uW10gPSBbXTtcclxuICAgIHByaXZhdGUgaXNWaXNpYmxlID0gdHJ1ZTtcclxuXHJcbiAgICBwdWJsaWMgd2lkdGg6IG51bWJlcjtcclxuICAgIHB1YmxpYyBoZWlnaHQ6IG51bWJlcjtcclxuXHJcbiAgICBwdWJsaWMgdXBkYXRlID0gKHRpbWVEaWZmOiBudW1iZXIpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5pc1Zpc2libGUpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCB1cGRhdGUgb2YgdGhpcy51cGRhdGVzKSB7XHJcbiAgICAgICAgICAgICAgICB1cGRhdGUodGltZURpZmYpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHVibGljIGRyYXcgPSAoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIHdpZHRoPzogbnVtYmVyLCBoZWlnaHQ/OiBudW1iZXIpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5pc1Zpc2libGUpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBhbmltYXRlIG9mIHRoaXMuYW5pbWF0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgYW5pbWF0ZShjdHgsIHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzaG93ID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuaXNWaXNpYmxlID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaGlkZSA9ICgpID0+IHtcclxuICAgICAgICB0aGlzLmlzVmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhZGRBbmltYXRpb24gPSAoZnVuYzogQW5pbWF0aW9uRnVuY3Rpb24pID0+IHtcclxuICAgICAgICB0aGlzLmFuaW1hdGlvbnMucHVzaChmdW5jKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmVtb3ZlQW5pbWF0aW9uID0gKGZ1bmM6IEFuaW1hdGlvbkZ1bmN0aW9uKSA9PiB7XHJcbiAgICAgICAgdGhpcy5hbmltYXRpb25zLnNwbGljZSh0aGlzLmFuaW1hdGlvbnMuaW5kZXhPZihmdW5jKSwgMSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFkZFVwZGF0ZSA9IChmdW5jOiBVcGRhdGVGdW5jdGlvbikgPT4ge1xyXG4gICAgICAgIHRoaXMudXBkYXRlcy5wdXNoKGZ1bmMpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyByZW1vdmVVcGRhdGUgPSAoZnVuYzogVXBkYXRlRnVuY3Rpb24pID0+IHtcclxuICAgICAgICB0aGlzLnVwZGF0ZXMuc3BsaWNlKHRoaXMudXBkYXRlcy5pbmRleE9mKGZ1bmMpLCAxKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYWRkQW5pbWF0YWJsZSA9IChhbmltYXRhYmxlOiBBbmltYXRhYmxlKSA9PiB7XHJcbiAgICAgICAgdGhpcy51cGRhdGVzLnB1c2goYW5pbWF0YWJsZS51cGRhdGUpO1xyXG4gICAgICAgIHRoaXMuYW5pbWF0aW9ucy5wdXNoKGFuaW1hdGFibGUuZHJhdyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlbW92ZUFuaW1hdGFibGUgPSAoYW5pbWF0YWJsZTogQW5pbWF0YWJsZSkgPT4ge1xyXG4gICAgICAgIHRoaXMudXBkYXRlcy5zcGxpY2UodGhpcy51cGRhdGVzLmluZGV4T2YoYW5pbWF0YWJsZS51cGRhdGUpLCAxKTtcclxuICAgICAgICB0aGlzLmFuaW1hdGlvbnMuc3BsaWNlKHRoaXMuYW5pbWF0aW9ucy5pbmRleE9mKGFuaW1hdGFibGUuZHJhdyksIDEpO1xyXG4gICAgfVxyXG59IiwiZXhwb3J0IGNsYXNzIEVFdmVudCB7XHJcbiAgICBwcml2YXRlIGxpc3RlbmVyczogKCgpID0+IHZvaWQpW10gPSBbXTtcclxuXHJcbiAgICBwdWJsaWMgYWRkRXZlbnRMaXN0ZW5lciA9IChsaXN0ZW5lcjogKCkgPT4gdm9pZCkgPT4ge1xyXG4gICAgICAgIC8vIHZhbGlkYXRpb25cclxuICAgICAgICBpZiAoIWxpc3RlbmVyIHx8IHRoaXMubGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpID49IDApIHtcclxuICAgICAgICAgICAgdGhyb3cgXCJsaXN0ZW5lciBhbHJlYWR5IGFkZGVkXCI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZGlzcGF0Y2hFdmVudCA9ICgpID0+IHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGV2ZW50ID0gdGhpcy5saXN0ZW5lcnNbaV07XHJcbiAgICAgICAgICAgIGV2ZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyByZW1vdmVFdmVudExpc3RlbmVyID0gKGxpc3RlbmVyOiAoKSA9PiB2b2lkKSA9PiB7XHJcbiAgICAgICAgLy8gdmFsaWRhdGlvblxyXG4gICAgICAgIGlmICghbGlzdGVuZXIgfHwgdGhpcy5saXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcikgPCAwKSB7XHJcbiAgICAgICAgICAgIHRocm93IFwibGlzdGVuZXIgbm90IGZvdW5kXCI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmxpc3RlbmVycy5zcGxpY2UodGhpcy5saXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lciksIDEpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRUV2ZW50VDxUPiB7XHJcbiAgICBwcml2YXRlIGxpc3RlbmVyczogKChhcmc6IFQpID0+IHZvaWQpW10gPSBbXTtcclxuXHJcbiAgICBwdWJsaWMgYWRkRXZlbnRMaXN0ZW5lciA9IChsaXN0ZW5lcjogKGFyZzogVCkgPT4gdm9pZCkgPT4ge1xyXG4gICAgICAgIC8vIHZhbGlkYXRpb25cclxuICAgICAgICBpZiAoIWxpc3RlbmVyIHx8IHRoaXMubGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpID49IDApIHtcclxuICAgICAgICAgICAgdGhyb3cgXCJsaXN0ZW5lciBhbHJlYWR5IGFkZGVkXCI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZGlzcGF0Y2hFdmVudCA9IChhcmc6IFQpID0+IHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGV2ZW50ID0gdGhpcy5saXN0ZW5lcnNbaV07XHJcbiAgICAgICAgICAgIGV2ZW50KGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyByZW1vdmVFdmVudExpc3RlbmVyID0gKGxpc3RlbmVyOiAoYXJnOiBUKSA9PiB2b2lkKSA9PiB7XHJcbiAgICAgICAgLy8gdmFsaWRhdGlvblxyXG4gICAgICAgIGlmICghbGlzdGVuZXIgfHwgdGhpcy5saXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcikgPCAwKSB7XHJcbiAgICAgICAgICAgIHRocm93IFwibGlzdGVuZXIgbm90IGZvdW5kXCI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmxpc3RlbmVycy5zcGxpY2UodGhpcy5saXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lciksIDEpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRUV2ZW50VFQ8VDEsIFQyPiB7XHJcbiAgICBwcml2YXRlIGxpc3RlbmVyczogKChhcmcxOiBUMSwgYXJnMjogVDIpID0+IHZvaWQpW10gPSBbXTtcclxuXHJcbiAgICBwdWJsaWMgYWRkRXZlbnRMaXN0ZW5lciA9IChsaXN0ZW5lcjogKGFyZzE6IFQxLCBhcmcyOiBUMikgPT4gdm9pZCkgPT4ge1xyXG4gICAgICAgIC8vIHZhbGlkYXRpb25cclxuICAgICAgICBpZiAoIWxpc3RlbmVyIHx8IHRoaXMubGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpID49IDApIHtcclxuICAgICAgICAgICAgdGhyb3cgXCJsaXN0ZW5lciBhbHJlYWR5IGFkZGVkXCI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZGlzcGF0Y2hFdmVudCA9IChhcmcxOiBUMSwgYXJnMjogVDIpID0+IHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGV2ZW50ID0gdGhpcy5saXN0ZW5lcnNbaV07XHJcbiAgICAgICAgICAgIGV2ZW50KGFyZzEsIGFyZzIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmVtb3ZlRXZlbnRMaXN0ZW5lciA9IChsaXN0ZW5lcjogKGFyZzE6IFQxLCBhcmcyOiBUMikgPT4gdm9pZCkgPT4ge1xyXG4gICAgICAgIC8vIHZhbGlkYXRpb25cclxuICAgICAgICBpZiAoIWxpc3RlbmVyIHx8IHRoaXMubGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpIDwgMCkge1xyXG4gICAgICAgICAgICB0aHJvdyBcImxpc3RlbmVyIG5vdCBmb3VuZFwiO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5saXN0ZW5lcnMuc3BsaWNlKHRoaXMubGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpLCAxKTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IEFuaW1hdGFibGUgfSBmcm9tIFwiLi9lbmMvYW5pbWF0aW9uXCI7XHJcbmltcG9ydCB7IENvbnRyb2xsZXIsIFNpZ25hbHMgfSBmcm9tIFwiLi9lbmMvY29udHJvbGxlclwiO1xyXG5pbXBvcnQgeyBFRXZlbnQsIEVFdmVudFQgfSBmcm9tIFwiLi9lbmMvZUV2ZW50XCI7XHJcblxyXG5lbnVtIERpcmVjdGlvbiB7XHJcbiAgICB1cCxcclxuICAgIHJpZ2h0LFxyXG4gICAgZG93bixcclxuICAgIGxlZnRcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFNuYWtlIGltcGxlbWVudHMgQW5pbWF0YWJsZSB7XHJcblxyXG4gICAgcHVibGljIHBhcnRzOiB7IHg6IG51bWJlciwgeTogbnVtYmVyIH1bXSA9IFtdO1xyXG4gICAgcHVibGljIHBvaW50czogbnVtYmVyO1xyXG5cclxuICAgIHByaXZhdGUgZGlyZWN0aW9uOiBEaXJlY3Rpb247XHJcbiAgICBwcml2YXRlIG5leHREaXJlY3Rpb246IERpcmVjdGlvblxyXG4gICAgcHJpdmF0ZSBjb2xvcjogc3RyaW5nO1xyXG4gICAgcHVibGljIGlNRG9uZTogRUV2ZW50O1xyXG4gICAgcHVibGljIGNvbGxlY3RlZDogRUV2ZW50VDxudW1iZXI+O1xyXG4gICAgcHVibGljIGlzRG9uZTogYm9vbGVhbjtcclxuICAgIHByaXZhdGUgYWRkUGFydDogYm9vbGVhbjtcclxuXHJcbiAgICBwdWJsaWMgZ2V0IGhlYWRQYXJ0KCk6IHsgeDogbnVtYmVyLCB5OiBudW1iZXIgfSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGFydHNbdGhpcy5wYXJ0cy5sZW5ndGggLSAxXTtcclxuICAgIH1cclxuXHJcblxyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZmllbGRTaXplOiBudW1iZXIsIHByaXZhdGUgY29udHJvbGxlcjogQ29udHJvbGxlciwgcHVibGljIHBsYXllck51bWJlcjogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5kaXJlY3Rpb24gPSBEaXJlY3Rpb24ucmlnaHQ7XHJcbiAgICAgICAgdGhpcy5wb2ludHMgPSAwO1xyXG4gICAgICAgIHRoaXMubmV4dERpcmVjdGlvbiA9IHRoaXMuZGlyZWN0aW9uO1xyXG4gICAgICAgIHRoaXMuaXNEb25lID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5jb2xvciA9IFwiaHNsKFwiICsgcGxheWVyTnVtYmVyICogMzYwICsgXCIsMTAwJSwgMzAlKVwiXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA3OyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5wYXJ0cy5wdXNoKHsgeDogMyArIGksIHk6IDEgKyBNYXRoLnJvdW5kKHBsYXllck51bWJlciAqIDIwKSB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29udHJvbGxlci5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcih0aGlzLmNvbnRyb2xsZXJTaWduYWwpXHJcblxyXG4gICAgICAgIHRoaXMuaU1Eb25lID0gbmV3IEVFdmVudCgpO1xyXG4gICAgICAgIHRoaXMuY29sbGVjdGVkID0gbmV3IEVFdmVudFQ8bnVtYmVyPigpO1xyXG4gICAgICAgIHRoaXMuY29sbGVjdGVkLmFkZEV2ZW50TGlzdGVuZXIodGhpcy5jb2xsZWN0ZWRTb21ldGhpbmcpO1xyXG4gICAgICAgIHRoaXMuaU1Eb25lLmFkZEV2ZW50TGlzdGVuZXIodGhpcy5maW5pc2gpXHJcbiAgICB9XHJcblxyXG5cclxuICAgIHByaXZhdGUgY29sbGVjdGVkU29tZXRoaW5nID0gKHdlaWdodDogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgdGhpcy5wb2ludHMgKz0gd2VpZ2h0ICogMjtcclxuICAgICAgICB0aGlzLmFkZFBhcnQgPSB0cnVlO1xyXG4gICAgfTtcclxuXHJcbiAgICBwcml2YXRlIGZpbmlzaCA9ICgpID0+IHtcclxuICAgICAgICB0aGlzLmlzRG9uZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5wb2ludHMgPSB0aGlzLnBvaW50cyAtIDg7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjb250cm9sbGVyU2lnbmFsID0gKHNlbmRlcjogQ29udHJvbGxlciwgc2lnbmFsOiBTaWduYWxzKSA9PiB7XHJcbiAgICAgICAgc3dpdGNoIChzaWduYWwpIHtcclxuICAgICAgICAgICAgY2FzZSBTaWduYWxzLnVwOlxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZGlyZWN0aW9uICE9IERpcmVjdGlvbi5kb3duKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5uZXh0RGlyZWN0aW9uID0gRGlyZWN0aW9uLnVwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgU2lnbmFscy5yaWdodDpcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRpcmVjdGlvbiAhPSBEaXJlY3Rpb24ubGVmdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubmV4dERpcmVjdGlvbiA9IERpcmVjdGlvbi5yaWdodDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFNpZ25hbHMuZG93bjpcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRpcmVjdGlvbiAhPSBEaXJlY3Rpb24udXApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm5leHREaXJlY3Rpb24gPSBEaXJlY3Rpb24uZG93bjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFNpZ25hbHMubGVmdDpcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRpcmVjdGlvbiAhPSBEaXJlY3Rpb24ucmlnaHQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm5leHREaXJlY3Rpb24gPSBEaXJlY3Rpb24ubGVmdDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdGljayA9ICgpID0+IHtcclxuICAgICAgICBpZiAoIXRoaXMuaXNEb25lKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGlyZWN0aW9uID0gdGhpcy5uZXh0RGlyZWN0aW9uO1xyXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50ID0gdGhpcy5wYXJ0c1t0aGlzLnBhcnRzLmxlbmd0aCAtIDFdXHJcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kaXJlY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgRGlyZWN0aW9uLnVwOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGFydHMucHVzaCh7IHg6IGN1cnJlbnQueCwgeTogY3VycmVudC55IC0gMSB9KVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBEaXJlY3Rpb24ucmlnaHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJ0cy5wdXNoKHsgeDogY3VycmVudC54ICsgMSwgeTogY3VycmVudC55IH0pXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIERpcmVjdGlvbi5kb3duOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGFydHMucHVzaCh7IHg6IGN1cnJlbnQueCwgeTogY3VycmVudC55ICsgMSB9KVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBEaXJlY3Rpb24ubGVmdDpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcnRzLnB1c2goeyB4OiBjdXJyZW50LnggLSAxLCB5OiBjdXJyZW50LnkgfSlcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIXRoaXMuYWRkUGFydCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wYXJ0cy5zaGlmdCgpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hZGRQYXJ0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHVwZGF0ZSA9ICh0aW1lRGlmZjogbnVtYmVyKSA9PiB7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGRyYXcgPSAoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIHdpZHRoPzogbnVtYmVyLCBoZWlnaHQ/OiBudW1iZXIpID0+IHtcclxuICAgICAgICBjb25zdCBudW1iZXJPZkJsb2Nrc1ggPSAodGhpcy5maWVsZFNpemUgKiAzMClcclxuICAgICAgICBjb25zdCBmaWVsZFNpemVYID0gd2lkdGggLyBudW1iZXJPZkJsb2Nrc1g7XHJcbiAgICAgICAgbGV0IG51bWJlck9mQmxvY2tzWSA9IGhlaWdodCAvIGZpZWxkU2l6ZVg7XHJcbiAgICAgICAgbnVtYmVyT2ZCbG9ja3NZID0gTWF0aC5jZWlsKG51bWJlck9mQmxvY2tzWSlcclxuICAgICAgICBjb25zdCBmaWVsZFNpemVZID0gaGVpZ2h0IC8gbnVtYmVyT2ZCbG9ja3NZO1xyXG5cclxuICAgICAgICB2YXIgY29sb3JHcmFkaWVudCA9IDMwIC8gdGhpcy5wYXJ0cy5sZW5ndGg7XHJcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IHRoaXMuY29sb3I7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnBhcnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzRG9uZSkge1xyXG4gICAgICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IFwiaHNsKFwiICsgdGhpcy5wbGF5ZXJOdW1iZXIgKiAzNjAgKyBcIiwxMDAlLCAzMCUpXCJcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBcImhzbChcIiArIHRoaXMucGxheWVyTnVtYmVyICogMzYwICsgXCIsMTAwJSwgXCIgKyAoMzAgKyBjb2xvckdyYWRpZW50ICogaSkgKyBcIiUpXCJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBwYXJ0ID0gdGhpcy5wYXJ0c1tpXTtcclxuICAgICAgICAgICAgY3R4LmZpbGxSZWN0KHBhcnQueCAqIGZpZWxkU2l6ZVgsIHBhcnQueSAqIGZpZWxkU2l6ZVksIGZpZWxkU2l6ZVgsIGZpZWxkU2l6ZVkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY3R4LnRleHRBbGlnbiA9IFwic3RhcnRcIjsgLy8gc3RhcnQgLyBsZWZ0IC8gY2VudGVyIC8gcmlnaHQgLyBlbmRcclxuICAgICAgICBjdHgudGV4dEJhc2VsaW5lID0gXCJ0b3BcIiAvLyBib3R0b20gLyBhbHBoYWJldGljIC8gbWlkZGxlIC8gaGFuZ2luZyAvIHRvcFxyXG4gICAgICAgIGN0eC5mb250ID0gXCI2MHB4IHNhbnMtc2VyaWZcIjtcclxuICAgICAgICBjdHguZmlsbFN0eWxlID0gXCJoc2woXCIgKyB0aGlzLnBsYXllck51bWJlciAqIDM2MCArIFwiLDEwMCUsIDUwJSlcIlxyXG4gICAgICAgIGN0eC5maWxsVGV4dCh0aGlzLnBvaW50cy50b1N0cmluZygpLCB3aWR0aCAqIHRoaXMucGxheWVyTnVtYmVyLCAxMClcclxuICAgIH1cclxufSIsImltcG9ydCB7IENvbnRyb2xsZXIsIFNpZ25hbHMsIENvbnRyb2xsZXJUeXBlIH0gZnJvbSBcIi4vY29udHJvbGxlclwiO1xyXG5pbXBvcnQgeyBFRXZlbnRUVCB9IGZyb20gXCIuL2VFdmVudFwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEtleWJvYXJkQ29udHJvbHMgaW1wbGVtZW50cyBDb250cm9sbGVyIHtcclxuICAgIHR5cGU6IENvbnRyb2xsZXJUeXBlO1xyXG4gICAgc2lnbmFsOiBFRXZlbnRUVDxDb250cm9sbGVyLCBzdHJpbmc+O1xyXG4gICAgcHVibGljIGE6IGJvb2xlYW47XHJcbiAgICBwdWJsaWMgeEF4ZXM6IG51bWJlcjtcclxuICAgIHB1YmxpYyB5QXhlczogbnVtYmVyO1xyXG5cclxuICAgIHB1YmxpYyBzdGFydDogYm9vbGVhbjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgbmFtZTogc3RyaW5nLCB1cEtleTogbnVtYmVyLCBsZWZ0S2V5OiBudW1iZXIsIGRvd25LZXk6IG51bWJlciwgcmlnaHRLZXk6IG51bWJlciwgYTogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy50eXBlID0gQ29udHJvbGxlclR5cGUua2V5Ym9hcmQ7XHJcbiAgICAgICAgdGhpcy5zaWduYWwgPSBuZXcgRUV2ZW50VFQ8Q29udHJvbGxlciwgc3RyaW5nPigpO1xyXG4gICAgICAgIHRoaXMueEF4ZXMgPSAwO1xyXG4gICAgICAgIHRoaXMueUF4ZXMgPSAwO1xyXG4gICAgICAgIHRoaXMuc3RhcnQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIChldmVudCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PSBsZWZ0S2V5KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnhBeGVzID0gLTFcclxuICAgICAgICAgICAgICAgIHRoaXMuc2lnbmFsLmRpc3BhdGNoRXZlbnQodGhpcywgU2lnbmFscy5sZWZ0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PSB1cEtleSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy55QXhlcyA9IC0xO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zaWduYWwuZGlzcGF0Y2hFdmVudCh0aGlzLCBTaWduYWxzLnVwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PSByaWdodEtleSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy54QXhlcyA9IDE7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNpZ25hbC5kaXNwYXRjaEV2ZW50KHRoaXMsIFNpZ25hbHMucmlnaHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChldmVudC5rZXlDb2RlID09IGRvd25LZXkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMueUF4ZXMgPSAxO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zaWduYWwuZGlzcGF0Y2hFdmVudCh0aGlzLCBTaWduYWxzLmRvd24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChldmVudC5rZXlDb2RlID09IDEzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2lnbmFsLmRpc3BhdGNoRXZlbnQodGhpcywgU2lnbmFscy5zdGFydCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT0gYSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2lnbmFsLmRpc3BhdGNoRXZlbnQodGhpcywgU2lnbmFscy5hKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIChldmVudCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PSBsZWZ0S2V5KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy54QXhlcyA9IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy54QXhlcyA9IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT0gdXBLZXkpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnlBeGVzID0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnlBeGVzID0gMDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PSByaWdodEtleSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMueEF4ZXMgPSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy54QXhlcyA9IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT0gZG93bktleSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMueUF4ZXMgPSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy55QXhlcyA9IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT0gMTMpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnQgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PSBhKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmEgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgRUV2ZW50VCB9IGZyb20gXCIuL2VFdmVudFwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEdhbWVwYWRTY2FubmVyIHtcclxuICAgIHByaXZhdGUgZ2FtZXBhZFNjYW5uZXI6IG51bWJlcjtcclxuICAgIHByaXZhdGUgZ2FtZXBhZHM6IEdhbWVwYWRbXSA9IFtdO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuc2Nhbm5lZEdhbWVwYWQgPSBuZXcgRUV2ZW50VDxHYW1lcGFkPigpO1xyXG4gICAgICAgIHRoaXMucmVzZXQoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhcnQoKSB7XHJcbiAgICAgICAgdGhpcy5nYW1lcGFkU2Nhbm5lciA9IHNldEludGVydmFsKHRoaXMuc2NhbmdhbWVwYWRzLCA1MDApO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdG9wKCkge1xyXG4gICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5nYW1lcGFkU2Nhbm5lcik7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlc2V0KCkge1xyXG4gICAgICAgIHRoaXMuZ2FtZXBhZHMgPSBbXTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHNjYW5nYW1lcGFkcyA9ICgpID0+IHtcclxuICAgICAgICB2YXIgZ2FtZXBhZHMgPSBuYXZpZ2F0b3IuZ2V0R2FtZXBhZHMgPyBuYXZpZ2F0b3IuZ2V0R2FtZXBhZHMoKSA6IFtdO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ2FtZXBhZHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGdhbWVwYWRzW2ldKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIShnYW1lcGFkc1tpXS5pbmRleCBpbiB0aGlzLmdhbWVwYWRzKSAmJiBnYW1lcGFkc1tpXS5idXR0b25zLmxlbmd0aCA+PSAxNikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2FtZXBhZHNbZ2FtZXBhZHNbaV0uaW5kZXhdID0gZ2FtZXBhZHNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2FubmVkR2FtZXBhZC5kaXNwYXRjaEV2ZW50KGdhbWVwYWRzW2ldKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2Nhbm5lZEdhbWVwYWQ6IEVFdmVudFQ8R2FtZXBhZD47XHJcbn0iLCJpbXBvcnQgeyBDb250cm9sbGVyLCBDb250cm9sbGVyVHlwZSwgU2lnbmFscyB9IGZyb20gXCIuL2NvbnRyb2xsZXJcIjtcclxuaW1wb3J0IHsgRUV2ZW50VFQgfSBmcm9tIFwiLi9lRXZlbnRcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBHYW1lcGFkQ29udHJvbHMgaW1wbGVtZW50cyBDb250cm9sbGVyIHtcclxuICAgIHNpZ25hbDogRUV2ZW50VFQ8Q29udHJvbGxlciwgc3RyaW5nPjtcclxuICAgIHR5cGU6IENvbnRyb2xsZXJUeXBlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBuYW1lOiBzdHJpbmcsIHByaXZhdGUgaW5kZXg6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuc2lnbmFsID0gbmV3IEVFdmVudFRUPENvbnRyb2xsZXIsIHN0cmluZz4oKTtcclxuICAgICAgICB0aGlzLnR5cGUgPSBDb250cm9sbGVyVHlwZS5nYW1lcGFkO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgeEF4ZXMoKTogbnVtYmVyIHtcclxuICAgICAgICB2YXIgZ2FtZXBhZHMgPSBuYXZpZ2F0b3IuZ2V0R2FtZXBhZHMoKTtcclxuICAgICAgICB2YXIgZ3AgPSBnYW1lcGFkc1t0aGlzLmluZGV4XTtcclxuICAgICAgICByZXR1cm4gZ3AuYXhlc1swXTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IHlBeGVzKCk6IG51bWJlciB7XHJcbiAgICAgICAgdmFyIGdhbWVwYWRzID0gbmF2aWdhdG9yLmdldEdhbWVwYWRzKCk7XHJcbiAgICAgICAgdmFyIGdwID0gZ2FtZXBhZHNbdGhpcy5pbmRleF07XHJcbiAgICAgICAgcmV0dXJuIGdwLmF4ZXNbMV07XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldCBzdGFydCgpOiBib29sZWFuIHtcclxuICAgICAgICB2YXIgZ2FtZXBhZHMgPSBuYXZpZ2F0b3IuZ2V0R2FtZXBhZHMoKTtcclxuICAgICAgICB2YXIgZ3AgPSBnYW1lcGFkc1t0aGlzLmluZGV4XTtcclxuICAgICAgICByZXR1cm4gZ3AuYnV0dG9uc1s5XS5wcmVzc2VkO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgYSgpOiBib29sZWFuIHtcclxuICAgICAgICB2YXIgZ2FtZXBhZHMgPSBuYXZpZ2F0b3IuZ2V0R2FtZXBhZHMoKTtcclxuICAgICAgICB2YXIgZ3AgPSBnYW1lcGFkc1t0aGlzLmluZGV4XTtcclxuICAgICAgICByZXR1cm4gZ3AuYnV0dG9uc1swXS5wcmVzc2VkO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgdXAoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgdmFyIGdhbWVwYWRzID0gbmF2aWdhdG9yLmdldEdhbWVwYWRzKCk7XHJcbiAgICAgICAgdmFyIGdwID0gZ2FtZXBhZHNbdGhpcy5pbmRleF07XHJcbiAgICAgICAgcmV0dXJuIGdwLmJ1dHRvbnNbMTJdLnByZXNzZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldCByaWdodCgpOiBib29sZWFuIHtcclxuICAgICAgICB2YXIgZ2FtZXBhZHMgPSBuYXZpZ2F0b3IuZ2V0R2FtZXBhZHMoKTtcclxuICAgICAgICB2YXIgZ3AgPSBnYW1lcGFkc1t0aGlzLmluZGV4XTtcclxuICAgICAgICByZXR1cm4gZ3AuYnV0dG9uc1sxNV0ucHJlc3NlZDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IGRvd24oKTogYm9vbGVhbiB7XHJcbiAgICAgICAgdmFyIGdhbWVwYWRzID0gbmF2aWdhdG9yLmdldEdhbWVwYWRzKCk7XHJcbiAgICAgICAgdmFyIGdwID0gZ2FtZXBhZHNbdGhpcy5pbmRleF07XHJcbiAgICAgICAgcmV0dXJuIGdwLmJ1dHRvbnNbMTNdLnByZXNzZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldCBsZWZ0KCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHZhciBnYW1lcGFkcyA9IG5hdmlnYXRvci5nZXRHYW1lcGFkcygpO1xyXG4gICAgICAgIHZhciBncCA9IGdhbWVwYWRzW3RoaXMuaW5kZXhdO1xyXG4gICAgICAgIHJldHVybiBncC5idXR0b25zWzE0XS5wcmVzc2VkO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBlbmFibGVTaWduYWxzKCkge1xyXG4gICAgICAgIHRoaXMuc2lnbmFsTGlzdGVuZXIoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHRpbWVvdXQgPSAwLjU7XHJcbiAgICBwcml2YXRlIHNpZ25hbGluZ1RpbWVyczogeyBbaWQ6IHN0cmluZ106IG51bWJlciB9ID0ge307XHJcblxyXG4gICAgcHJpdmF0ZSBzaWduYWxMaXN0ZW5lciA9ICgpID0+IHtcclxuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5zaWduYWxMaXN0ZW5lcik7XHJcblxyXG4gICAgICAgIHZhciBub3cgPSBEYXRlLm5vdygpO1xyXG5cclxuICAgICAgICB0aGlzLmNoZWNrU2lnbmFsKHRoaXMuc3RhcnQsIFNpZ25hbHMuc3RhcnQsIG5vdyk7XHJcbiAgICAgICAgdGhpcy5jaGVja1NpZ25hbCh0aGlzLmEsIFNpZ25hbHMuYSwgbm93KTtcclxuICAgICAgICB0aGlzLmNoZWNrU2lnbmFsKHRoaXMudXAsIFNpZ25hbHMudXAsIG5vdyk7XHJcbiAgICAgICAgdGhpcy5jaGVja1NpZ25hbCh0aGlzLnJpZ2h0LCBTaWduYWxzLnJpZ2h0LCBub3cpO1xyXG4gICAgICAgIHRoaXMuY2hlY2tTaWduYWwodGhpcy5sZWZ0LCBTaWduYWxzLmxlZnQsIG5vdyk7XHJcbiAgICAgICAgdGhpcy5jaGVja1NpZ25hbCh0aGlzLmRvd24sIFNpZ25hbHMuZG93biwgbm93KTtcclxuICAgICAgICB0aGlzLmNoZWNrU2lnbmFsKHRoaXMueUF4ZXMgPCAtMC41LCBTaWduYWxzLnVwLCBub3cpO1xyXG4gICAgICAgIHRoaXMuY2hlY2tTaWduYWwodGhpcy55QXhlcyA+IDAuNSwgU2lnbmFscy5kb3duLCBub3cpO1xyXG4gICAgICAgIHRoaXMuY2hlY2tTaWduYWwodGhpcy54QXhlcyA8IC0wLjUsIFNpZ25hbHMubGVmdCwgbm93KTtcclxuICAgICAgICB0aGlzLmNoZWNrU2lnbmFsKHRoaXMueEF4ZXMgPiAwLjUsIFNpZ25hbHMucmlnaHQsIG5vdyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjaGVja1NpZ25hbCA9IChpc1ByZXNzZWQ6IGJvb2xlYW4sIHNpZ25hbDogU2lnbmFscywgbm93OiBudW1iZXIpID0+IHtcclxuICAgICAgICBpZiAoaXNQcmVzc2VkKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5zaWduYWxpbmdUaW1lcnNbc2lnbmFsXSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zaWduYWxpbmdUaW1lcnNbc2lnbmFsXSA9IERhdGUubm93KCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNpZ25hbC5kaXNwYXRjaEV2ZW50KHRoaXMsIHNpZ25hbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoKG5vdyAtIHRoaXMuc2lnbmFsaW5nVGltZXJzW3NpZ25hbF0pIC8gMTAwMCA+PSB0aGlzLnRpbWVvdXQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2lnbmFsLmRpc3BhdGNoRXZlbnQodGhpcywgc2lnbmFsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5zaWduYWxpbmdUaW1lcnNbc2lnbmFsXSA9IHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBWaWV3IH0gZnJvbSBcIi4vZW5jL3ZpZXdcIjtcclxuaW1wb3J0IHsgQ29udHJvbGxlciwgU2lnbmFscywgQ29udHJvbGxlclR5cGUgfSBmcm9tIFwiLi9lbmMvY29udHJvbGxlclwiO1xyXG5pbXBvcnQgeyBLZXlib2FyZENvbnRyb2xzIH0gZnJvbSBcIi4vZW5jL2tleWJvYXJkQ29udHJvbHNcIjtcclxuaW1wb3J0IHsgR2FtZXBhZFNjYW5uZXIgfSBmcm9tIFwiLi9lbmMvZ2FtZXBhZFNjYW5uZXJcIjtcclxuaW1wb3J0IHsgR2FtZXBhZENvbnRyb2xzIH0gZnJvbSBcIi4vZW5jL2dhbWVwYWRDb250cm9sc1wiO1xyXG5pbXBvcnQgY29udHJvbHNfZ2FtZXBhZCBmcm9tIFwiLi9hc3NldHMvY29udHJvbHNfZ2FtZXBhZC5wbmdcIjtcclxuaW1wb3J0IGNvbnRyb2xzX2tleWJvYXJkIGZyb20gXCIuL2Fzc2V0cy9jb250cm9sc19rZXlib2FyZC5wbmdcIjtcclxuaW1wb3J0IHsgRUV2ZW50IH0gZnJvbSBcIi4vZW5jL2VFdmVudFwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIE1haW5NZW51VmlldyBleHRlbmRzIFZpZXcge1xyXG4gICAgcHJpdmF0ZSBzZWxlY3RlZE9wdGlvbjogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBvcHRpb25zOiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgcHVibGljIGNvbnRyb2xsZXJzOiBDb250cm9sbGVyW10gPSBbXTtcclxuICAgIGNvbnRyb2xzX2dhbWVwYWRfaW1hZ2U6IEhUTUxJbWFnZUVsZW1lbnQ7XHJcbiAgICBjb250cm9sc19rZXlib2FyZF9pbWFnZTogSFRNTEltYWdlRWxlbWVudDtcclxuXHJcbiAgICBwcml2YXRlIHNob3dDb250cm9sczogYm9vbGVhbjtcclxuICAgIGdhbWVwYWRTY2FubmVyOiBHYW1lcGFkU2Nhbm5lcjtcclxuXHJcbiAgICBwdWJsaWMgcmVxdWVzdFN0YXJ0OiBFRXZlbnQ7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLnJlcXVlc3RTdGFydCA9IG5ldyBFRXZlbnQoKTtcclxuICAgICAgICB0aGlzLm9wdGlvbnMgPSBbXCJTdGFydCBHYW1lXCIsIFwiU2hvdyAvIEhpZGUgQ29udHJvbHNcIl07XHJcbiAgICAgICAgdGhpcy5zZWxlY3RlZE9wdGlvbiA9IDA7XHJcbiAgICAgICAgdGhpcy5zaG93Q29udHJvbHMgPSB0cnVlO1xyXG5cclxuICAgICAgICB0aGlzLmNvbnRyb2xzX2dhbWVwYWRfaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcclxuICAgICAgICB0aGlzLmNvbnRyb2xzX2dhbWVwYWRfaW1hZ2Uuc3JjID0gY29udHJvbHNfZ2FtZXBhZDtcclxuICAgICAgICB0aGlzLmNvbnRyb2xzX2tleWJvYXJkX2ltYWdlID0gbmV3IEltYWdlKCk7XHJcbiAgICAgICAgdGhpcy5jb250cm9sc19rZXlib2FyZF9pbWFnZS5zcmMgPSBjb250cm9sc19rZXlib2FyZDtcclxuXHJcbiAgICAgICAgdGhpcy5hZGRBbmltYXRpb24oKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikgPT4ge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zaG93Q29udHJvbHMpIHtcclxuICAgICAgICAgICAgICAgIGxldCBuZXdXaWR0aCA9IHdpZHRoIC8gMztcclxuICAgICAgICAgICAgICAgIGxldCBuZXdIZWlnaHQgPSBuZXdXaWR0aCAvIHRoaXMuY29udHJvbHNfZ2FtZXBhZF9pbWFnZS5uYXR1cmFsV2lkdGggKiB0aGlzLmNvbnRyb2xzX2dhbWVwYWRfaW1hZ2UubmF0dXJhbEhlaWdodDtcclxuICAgICAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2UodGhpcy5jb250cm9sc19nYW1lcGFkX2ltYWdlLCBuZXdXaWR0aCAtIG5ld1dpZHRoIC8gMiwgaGVpZ2h0ICogMyAvIDQgLSBuZXdIZWlnaHQgLyAyLCBuZXdXaWR0aCwgbmV3SGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgIG5ld0hlaWdodCA9IG5ld1dpZHRoIC8gdGhpcy5jb250cm9sc19rZXlib2FyZF9pbWFnZS5uYXR1cmFsV2lkdGggKiB0aGlzLmNvbnRyb2xzX2tleWJvYXJkX2ltYWdlLm5hdHVyYWxIZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICBjdHguZHJhd0ltYWdlKHRoaXMuY29udHJvbHNfa2V5Ym9hcmRfaW1hZ2UsIG5ld1dpZHRoICogMiAtIG5ld1dpZHRoIC8gMiwgaGVpZ2h0ICogMyAvIDQgLSBuZXdIZWlnaHQgLyAyLCBuZXdXaWR0aCwgbmV3SGVpZ2h0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLmFkZEFuaW1hdGlvbih0aGlzLmRyYXdPcHRpb25zKTtcclxuICAgICAgICB0aGlzLmFkZEFuaW1hdGlvbih0aGlzLmRyYXdDb250cm9sbGVycyk7XHJcblxyXG4gICAgICAgIHRoaXMuZ2FtZXBhZFNjYW5uZXIgPSBuZXcgR2FtZXBhZFNjYW5uZXIoKTtcclxuICAgICAgICB0aGlzLmdhbWVwYWRTY2FubmVyLnNjYW5uZWRHYW1lcGFkLmFkZEV2ZW50TGlzdGVuZXIoKGdhbWVwYWQ6IEdhbWVwYWQpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5hZGRDb250cm9sbGVyKG5ldyBHYW1lcGFkQ29udHJvbHMoZ2FtZXBhZC5pbmRleC50b1N0cmluZygpLCBnYW1lcGFkLmluZGV4KSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5nYW1lcGFkU2Nhbm5lci5zdGFydCgpO1xyXG5cclxuICAgICAgICB2YXIga2V5Ym9hcmQgPSBuZXcgS2V5Ym9hcmRDb250cm9scyhcImFycm93c1wiLCAzOCwgMzcsIDQwLCAzOSwgMzIpO1xyXG4gICAgICAgIHRoaXMuYWRkQ29udHJvbGxlcihrZXlib2FyZCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGRyYXdPcHRpb25zID0gKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikgPT4ge1xyXG5cclxuICAgICAgICBpZiAodGhpcy5jb250cm9sbGVycy5sZW5ndGggPD0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGZvbnRTaXplID0gMjI7XHJcbiAgICAgICAgY29uc3QgbWFyZ2luID0gNTtcclxuICAgICAgICBjb25zdCBvcHRpb25zSGVpZ2h0ID0gKGZvbnRTaXplICsgbWFyZ2luICogMikgKiB0aGlzLm9wdGlvbnMubGVuZ3RoO1xyXG4gICAgICAgIGNvbnN0IHN0YXJ0SGVpZ2h0ID0gaGVpZ2h0IC8gMiAtIG9wdGlvbnNIZWlnaHQgLyAyO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5vcHRpb25zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbiA9IHRoaXMub3B0aW9uc1tpXTtcclxuXHJcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBcImJsYWNrXCI7XHJcbiAgICAgICAgICAgIGN0eC50ZXh0QWxpZ24gPSBcImNlbnRlclwiOyAvLyBzdGFydCAvIGxlZnQgLyBjZW50ZXIgLyByaWdodCAvIGVuZFxyXG4gICAgICAgICAgICBjdHgudGV4dEJhc2VsaW5lID0gXCJtaWRkbGVcIiAvLyBib3R0b20gLyBhbHBoYWJldGljIC8gbWlkZGxlIC8gaGFuZ2luZyAvIHRvcFxyXG4gICAgICAgICAgICBjdHguZm9udCA9IFwiMjJweCBzYW5zLXNlcmlmXCI7XHJcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbkhlaWdodCA9IHN0YXJ0SGVpZ2h0ICsgbWFyZ2luICsgKGZvbnRTaXplICsgbWFyZ2luICogMikgKiBpO1xyXG4gICAgICAgICAgICBjdHguZmlsbFRleHQob3B0aW9uLCB3aWR0aCAvIDIsIG9wdGlvbkhlaWdodCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoaSA9PT0gdGhpcy5zZWxlY3RlZE9wdGlvbikge1xyXG4gICAgICAgICAgICAgICAgY3R4LnN0cm9rZVJlY3Qod2lkdGggLyAyIC0gY3R4Lm1lYXN1cmVUZXh0KG9wdGlvbikud2lkdGggLyAyIC0gbWFyZ2luLCBvcHRpb25IZWlnaHQgLSBmb250U2l6ZSAvIDIgLSBtYXJnaW4sIGN0eC5tZWFzdXJlVGV4dChvcHRpb24pLndpZHRoICsgbWFyZ2luICogMiwgZm9udFNpemUgKyBtYXJnaW4gKiAyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZHJhd0NvbnRyb2xsZXJzID0gKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikgPT4ge1xyXG4gICAgICAgIHZhciBtYXJnaW4gPSAxNTtcclxuICAgICAgICB2YXIgY29udHJvbGxlcldpZHRoID0gNjA7XHJcbiAgICAgICAgdmFyIHRvdGFsV2lkdGggPSBtYXJnaW4gKyB0aGlzLmNvbnRyb2xsZXJzLmxlbmd0aCAqIChjb250cm9sbGVyV2lkdGggKyBtYXJnaW4pXHJcbiAgICAgICAgdmFyIHN0YXJ0WCA9IHdpZHRoIC8gMiAtIHRvdGFsV2lkdGggLyAyXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNvbnRyb2xsZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBcImhzbChcIiArIGkgLyB0aGlzLmNvbnRyb2xsZXJzLmxlbmd0aCAqIDM2MCArIFwiLDEwMCUsIDQwJSlcIjtcclxuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IHRoaXMuY29udHJvbGxlcnNbaV07XHJcbiAgICAgICAgICAgIHZhciB4ID0gc3RhcnRYICsgbWFyZ2luICsgKG1hcmdpbiArIGNvbnRyb2xsZXJXaWR0aCkgKiBpO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKGVsZW1lbnQudHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBDb250cm9sbGVyVHlwZS5nYW1lcGFkOlxyXG4gICAgICAgICAgICAgICAgICAgIGN0eC5mb250ID0gJzYwcHggRm9udEF3ZXNvbWUnO1xyXG4gICAgICAgICAgICAgICAgICAgIGN0eC5maWxsVGV4dCgnXFx1ZjExYicsIHgsIGhlaWdodCAvIDQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBDb250cm9sbGVyVHlwZS5rZXlib2FyZDpcclxuICAgICAgICAgICAgICAgICAgICBjdHguZm9udCA9ICc2MHB4IEZvbnRBd2Vzb21lJztcclxuICAgICAgICAgICAgICAgICAgICBjdHguZmlsbFRleHQoJ1xcdWYxMWMnLCB4LCBoZWlnaHQgLyA0KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhZGRDb250cm9sbGVyID0gKGNvbnRyb2xsZXI6IENvbnRyb2xsZXIpID0+IHtcclxuICAgICAgICBpZiAoY29udHJvbGxlci50eXBlID09IENvbnRyb2xsZXJUeXBlLmdhbWVwYWQpIHtcclxuICAgICAgICAgICAgKDxHYW1lcGFkQ29udHJvbHM+Y29udHJvbGxlcikuZW5hYmxlU2lnbmFscygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb250cm9sbGVyLnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKHRoaXMuY29udHJvbGxlclNpZ25hbClcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGNvbnRyb2xsZXJTaWduYWwgPSAoc2VuZGVyOiBDb250cm9sbGVyLCBzaWduYWw6IFNpZ25hbHMpID0+IHtcclxuICAgICAgICBpZiAoc2lnbmFsID09IFNpZ25hbHMuc3RhcnQpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY29udHJvbGxlcnMuaW5kZXhPZihzZW5kZXIpID49IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udHJvbGxlcnMuc3BsaWNlKHRoaXMuY29udHJvbGxlcnMuaW5kZXhPZihzZW5kZXIpLCAxKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udHJvbGxlcnMucHVzaChzZW5kZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmNvbnRyb2xsZXJzLmxlbmd0aCA+IDAgJiYgdGhpcy5jb250cm9sbGVyc1swXSA9PSBzZW5kZXIpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChzaWduYWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgU2lnbmFscy5kb3duOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRPcHRpb24rKztcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RlZE9wdGlvbiA+PSB0aGlzLm9wdGlvbnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRPcHRpb24gPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgU2lnbmFscy51cDpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkT3B0aW9uLS07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRPcHRpb24gPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRPcHRpb24gPSB0aGlzLm9wdGlvbnMubGVuZ3RoIC0gMTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFNpZ25hbHMuYTpcclxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuc2VsZWN0ZWRPcHRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nYW1lcGFkU2Nhbm5lci5zdG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlcXVlc3RTdGFydC5kaXNwYXRjaEV2ZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93Q29udHJvbHMgPSAhdGhpcy5zaG93Q29udHJvbHM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBWaWV3IH0gZnJvbSBcIi4vZW5jL3ZpZXdcIjtcclxuaW1wb3J0IHsgQ29udHJvbGxlciwgU2lnbmFscyB9IGZyb20gXCIuL2VuYy9jb250cm9sbGVyXCI7XHJcbmltcG9ydCB7IFNuYWtlIH0gZnJvbSBcIi4vc25ha2VcIjtcclxuaW1wb3J0IGRlYXRoIGZyb20gXCIuL2Fzc2V0cy9za3VsbC1hbmQtY3Jvc3Nib25lcy5wbmdcIjtcclxuaW1wb3J0IHsgRUV2ZW50IH0gZnJvbSBcIi4vZW5jL2VFdmVudFwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEdhbWVWaWV3IGV4dGVuZHMgVmlldyB7XHJcbiAgICBwcml2YXRlIHNuYWtlczogU25ha2VbXSA9IFtdO1xyXG5cclxuICAgIHByaXZhdGUgZnBzSW50ZXJ2YWwgPSAzMDA7XHJcbiAgICBsYXN0RnJhbWVUaW1lOiBudW1iZXI7XHJcbiAgICBmaWVsZFNpemU6IG51bWJlcjtcclxuICAgIG51bWJlck9mQmxvY2tzWTogbnVtYmVyO1xyXG4gICAgbnVtYmVyT2ZCbG9ja3NYOiBudW1iZXI7XHJcbiAgICBpdGVtczogeyB4OiBudW1iZXIsIHk6IG51bWJlciwgd2VpZ2h0OiBudW1iZXIsIGRyYXdTdGFydDogbnVtYmVyIH1bXSA9IFtdO1xyXG4gICAgaXRlbVNwYXduZXJEZWxheTogbnVtYmVyO1xyXG4gICAgY3VycmVudEl0ZW1TcGF3bkRlbGF5OiBudW1iZXI7XHJcbiAgICBtYXhJdGVtczogbnVtYmVyO1xyXG4gICAgbnVtYmVyT2ZQbGF5ZXJzOiBudW1iZXI7XHJcbiAgICBnYW1lRmluaXNoZWQ6IGJvb2xlYW47XHJcbiAgICBkZWF0aEltYWdlOiBhbnk7XHJcbiAgICBwcml2YXRlIGFsbG93TmV3R2FtZTogYm9vbGVhbjtcclxuICAgIHB1YmxpYyByZXF1ZXN0TmV3R2FtZTogRUV2ZW50O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgY29udHJvbGxlcnM6IENvbnRyb2xsZXJbXSkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy5yZXF1ZXN0TmV3R2FtZSA9IG5ldyBFRXZlbnQoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhcnQoKSB7XHJcbiAgICAgICAgdGhpcy5kZWF0aEltYWdlID0gbmV3IEltYWdlKCk7XHJcbiAgICAgICAgdGhpcy5kZWF0aEltYWdlLnNyYyA9IGRlYXRoO1xyXG4gICAgICAgIHRoaXMuZmllbGRTaXplID0gMTtcclxuICAgICAgICB0aGlzLml0ZW1TcGF3bmVyRGVsYXkgPSA1O1xyXG4gICAgICAgIHRoaXMuY3VycmVudEl0ZW1TcGF3bkRlbGF5ID0gdGhpcy5pdGVtU3Bhd25lckRlbGF5O1xyXG4gICAgICAgIHRoaXMubWF4SXRlbXMgPSAzO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jb250cm9sbGVycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBjb250cm9sbGVyID0gdGhpcy5jb250cm9sbGVyc1tpXTtcclxuICAgICAgICAgICAgdmFyIHNuYWtlID0gbmV3IFNuYWtlKHRoaXMuZmllbGRTaXplLCBjb250cm9sbGVyLCBpIC8gdGhpcy5jb250cm9sbGVycy5sZW5ndGgpO1xyXG4gICAgICAgICAgICB0aGlzLmFkZEFuaW1hdGFibGUoc25ha2UpO1xyXG4gICAgICAgICAgICBzbmFrZS5pTURvbmUuYWRkRXZlbnRMaXN0ZW5lcih0aGlzLnNuYWtlSXNEb25lKTtcclxuICAgICAgICAgICAgdGhpcy5zbmFrZXMucHVzaChzbmFrZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmxhc3RGcmFtZVRpbWUgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgIHRoaXMuYWRkVXBkYXRlKHRoaXMudXBkYXRlKTtcclxuICAgICAgICB0aGlzLmFkZEFuaW1hdGlvbih0aGlzLmFuaW1hdGlvbik7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jb250cm9sbGVycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBjb250cm9sbGVyID0gdGhpcy5jb250cm9sbGVyc1tpXTtcclxuXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXIuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoKHNlbmRlcjogQ29udHJvbGxlciwgc2lnbmFsOiBTaWduYWxzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5nYW1lRmluaXNoZWQgJiYgdGhpcy5hbGxvd05ld0dhbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2lnbmFsID09IFNpZ25hbHMuYSB8fCBzaWduYWwgPT0gU2lnbmFscy5zdGFydCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlcXVlc3ROZXdHYW1lLmRpc3BhdGNoRXZlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHNuYWtlSXNEb25lID0gKCkgPT4ge1xyXG4gICAgICAgIGxldCBzbmFrZXNEb25lID0gdGhpcy5zbmFrZXMubWFwKHMgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gcy5pc0RvbmU7XHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgbGV0IHNuYWtlc0FsaXZlID0gc25ha2VzRG9uZS5maWx0ZXIocyA9PiAhcykubGVuZ3RoO1xyXG4gICAgICAgIGlmIChzbmFrZXNBbGl2ZSA9PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ2FtZUZpbmlzaGVkTWV0aG9kKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2FtZUZpbmlzaGVkTWV0aG9kID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuZ2FtZUZpbmlzaGVkID0gdHJ1ZTtcclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5hbGxvd05ld0dhbWUgPSB0cnVlO1xyXG4gICAgICAgIH0sIDMwMDApO1xyXG4gICAgICAgIHRoaXMuc25ha2VzID0gdGhpcy5zbmFrZXMuc29ydCgoczEsIHMyKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBzMi5wb2ludHMgLSBzMS5wb2ludHM7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5hZGRBbmltYXRpb24oKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikgPT4ge1xyXG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gXCJyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuOClcIlxyXG4gICAgICAgICAgICBjdHguZmlsbFJlY3QoMCwgMCwgd2lkdGgsIGhlaWdodCk7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc25ha2VzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzbmFrZSA9IHRoaXMuc25ha2VzW2ldO1xyXG4gICAgICAgICAgICAgICAgY3R4LnRleHRBbGlnbiA9IFwiY2VudGVyXCI7IC8vIHN0YXJ0IC8gbGVmdCAvIGNlbnRlciAvIHJpZ2h0IC8gZW5kXHJcbiAgICAgICAgICAgICAgICBjdHgudGV4dEJhc2VsaW5lID0gXCJ0b3BcIiAvLyBib3R0b20gLyBhbHBoYWJldGljIC8gbWlkZGxlIC8gaGFuZ2luZyAvIHRvcFxyXG4gICAgICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IFwiaHNsKFwiICsgc25ha2UucGxheWVyTnVtYmVyICogMzYwICsgXCIsMTAwJSwgNTAlKVwiXHJcbiAgICAgICAgICAgICAgICB2YXIgeCA9IHdpZHRoICogc25ha2UucGxheWVyTnVtYmVyICsgd2lkdGggKiAoMSAvIHRoaXMuc25ha2VzLmxlbmd0aCkgLyAyO1xyXG4gICAgICAgICAgICAgICAgaWYgKHNuYWtlLmlzRG9uZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBuZXdXaWR0aCA9IHdpZHRoIC8gdGhpcy5zbmFrZXMubGVuZ3RoIC8gNDtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbmV3SGVpZ2h0ID0gbmV3V2lkdGggLyB0aGlzLmRlYXRoSW1hZ2UubmF0dXJhbFdpZHRoICogdGhpcy5kZWF0aEltYWdlLm5hdHVyYWxIZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgY3R4LmRyYXdJbWFnZSh0aGlzLmRlYXRoSW1hZ2UsIHggLSBuZXdXaWR0aCAvIDIsIGhlaWdodCAvIDIgLSA4MCAtIG5ld0hlaWdodCAtIDIwLCBuZXdXaWR0aCwgbmV3SGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGN0eC5mb250ID0gXCI1MHB4IHNhbnMtc2VyaWZcIjtcclxuICAgICAgICAgICAgICAgIGN0eC5maWxsVGV4dChcIlNjb3JlOiBcIiArIHNuYWtlLnBvaW50cy50b1N0cmluZygpLCB4LCBoZWlnaHQgLyAyIC0gODApXHJcbiAgICAgICAgICAgICAgICBjdHguZm9udCA9ICg2MCArICh0aGlzLnNuYWtlcy5sZW5ndGggLSBpKSAqIDIwKSArIFwicHggc2Fucy1zZXJpZlwiO1xyXG5cclxuICAgICAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBcImhzbChcIiArIHNuYWtlLnBsYXllck51bWJlciAqIDM2MCArIFwiLDEwMCUsIDUwJSlcIlxyXG4gICAgICAgICAgICAgICAgY3R4LmZpbGxUZXh0KChpICsgMSkudG9TdHJpbmcoKSArIFwiLlwiLCB4LCBoZWlnaHQgLyAyKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5hbGxvd05ld0dhbWUpIHtcclxuICAgICAgICAgICAgICAgIGN0eC50ZXh0QWxpZ24gPSBcImNlbnRlclwiOyAvLyBzdGFydCAvIGxlZnQgLyBjZW50ZXIgLyByaWdodCAvIGVuZFxyXG4gICAgICAgICAgICAgICAgY3R4LnRleHRCYXNlbGluZSA9IFwidG9wXCIgLy8gYm90dG9tIC8gYWxwaGFiZXRpYyAvIG1pZGRsZSAvIGhhbmdpbmcgLyB0b3BcclxuICAgICAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBcImJsYWNrXCJcclxuICAgICAgICAgICAgICAgIGN0eC5mb250ID0gXCI1MHB4IHNhbnMtc2VyaWZcIjtcclxuICAgICAgICAgICAgICAgIGN0eC5maWxsVGV4dChcIlByZXNzIGEgYnV0dG9uIHRvIHN0YXJ0IGEgbmV3IGdhbWUuXCIsIHdpZHRoIC8gMiwgaGVpZ2h0IC8gNCAqIDMpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG5cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdXBkYXRlID0gKHRpbWVEaWZmOiBudW1iZXIpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5nYW1lRmluaXNoZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgbm93ID0gRGF0ZS5ub3coKTtcclxuICAgICAgICB2YXIgZWxhcHNlZCA9IG5vdyAtIHRoaXMubGFzdEZyYW1lVGltZTtcclxuXHJcbiAgICAgICAgaWYgKGVsYXBzZWQgPiB0aGlzLmZwc0ludGVydmFsKSB7XHJcbiAgICAgICAgICAgIHRoaXMubGFzdEZyYW1lVGltZSA9IG5vdztcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLml0ZW1zLmxlbmd0aCA8IHRoaXMubWF4SXRlbXMpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRJdGVtU3Bhd25EZWxheSA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50SXRlbVNwYXduRGVsYXkgPSB0aGlzLml0ZW1TcGF3bmVyRGVsYXk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGZvdW5kSXRlbSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG1heEl0ZXJhdGlvbnMgPSAyMDtcclxuICAgICAgICAgICAgICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kSXRlbSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpdGVtWCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHRoaXMubnVtYmVyT2ZCbG9ja3NYKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGl0ZW1ZID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdGhpcy5udW1iZXJPZkJsb2Nrc1kpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnNuYWtlcy5sZW5ndGggJiYgZm91bmRJdGVtOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNuYWtlID0gdGhpcy5zbmFrZXNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHNuYWtlLnBhcnRzLmxlbmd0aCAmJiBmb3VuZEl0ZW07IGorKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcnQgPSBzbmFrZS5wYXJ0c1tqXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFydC54ID09IGl0ZW1YICYmIHBhcnQueSA9PSBpdGVtWSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3VuZEl0ZW0gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4SXRlcmF0aW9ucy0tO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZm91bmRJdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLml0ZW1zLnB1c2goeyB4OiBpdGVtWCwgeTogaXRlbVksIHdlaWdodDogKE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDIpICsgMSkgLyAyLCBkcmF3U3RhcnQ6IE1hdGgucmFuZG9tKCkgKiBNYXRoLlBJICogMiB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKCFmb3VuZEl0ZW0gJiYgbWF4SXRlcmF0aW9ucyA+IDApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50SXRlbVNwYXduRGVsYXktLTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnNuYWtlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc25ha2UgPSB0aGlzLnNuYWtlc1tpXTtcclxuICAgICAgICAgICAgICAgIHNuYWtlLnRpY2soKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc25ha2VzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzbmFrZTEgPSB0aGlzLnNuYWtlc1tpXTtcclxuICAgICAgICAgICAgICAgIGlmICghc25ha2UxLmlzRG9uZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzbmFrZTEuaGVhZFBhcnQueCA8IDAgfHwgc25ha2UxLmhlYWRQYXJ0LnkgPCAwIHx8IHNuYWtlMS5oZWFkUGFydC54ID49IHRoaXMubnVtYmVyT2ZCbG9ja3NYIHx8IHNuYWtlMS5oZWFkUGFydC55ID49IHRoaXMubnVtYmVyT2ZCbG9ja3NZKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNuYWtlMS5pTURvbmUuZGlzcGF0Y2hFdmVudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuc25ha2VzLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNuYWtlMiA9IHRoaXMuc25ha2VzW2pdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbGVuZ3RoID0gc25ha2UxICE9IHNuYWtlMiA/IHNuYWtlMi5wYXJ0cy5sZW5ndGggOiBzbmFrZTIucGFydHMubGVuZ3RoIC0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBsZW5ndGg7IGsrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFydCA9IHNuYWtlMi5wYXJ0c1trXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJ0LnggPT0gc25ha2UxLmhlYWRQYXJ0LnggJiYgcGFydC55ID09IHNuYWtlMS5oZWFkUGFydC55KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc25ha2UxLmlNRG9uZS5kaXNwYXRjaEV2ZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbGxlY3RlZEl0ZW1JbmRpY2VzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLml0ZW1zLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLml0ZW1zW2pdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS54ID09IHNuYWtlMS5oZWFkUGFydC54ICYmIGl0ZW0ueSA9PSBzbmFrZTEuaGVhZFBhcnQueSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sbGVjdGVkSXRlbUluZGljZXMucHVzaChqKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNuYWtlMS5jb2xsZWN0ZWQuZGlzcGF0Y2hFdmVudChpdGVtLndlaWdodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb2xsZWN0ZWRJdGVtSW5kaWNlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpdGVtSW5kZXggPSBjb2xsZWN0ZWRJdGVtSW5kaWNlc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pdGVtcy5zcGxpY2UoaXRlbUluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBpc0ZpcnN0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgbGV0IHNuYWtlc0FsaXZlID0gdGhpcy5zbmFrZXMuZmlsdGVyKHMgPT4gIXMuaXNEb25lKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChzbmFrZXNBbGl2ZS5sZW5ndGggPT0gMSAmJiB0aGlzLnNuYWtlcy5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc25ha2VzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc25ha2UyID0gdGhpcy5zbmFrZXNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNuYWtlMiAhPSBzbmFrZXNBbGl2ZVswXSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNuYWtlMi5wb2ludHMgPj0gc25ha2VzQWxpdmVbMF0ucG9pbnRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0ZpcnN0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNGaXJzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2FtZUZpbmlzaGVkTWV0aG9kKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHB1YmxpYyBhbmltYXRpb24gPSAoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgbGV0IGZpZWxkU2l6ZVggPSB3aWR0aCAvIHRoaXMubnVtYmVyT2ZCbG9ja3NYO1xyXG4gICAgICAgIGNvbnN0IGZpZWxkU2l6ZVkgPSBoZWlnaHQgLyB0aGlzLm51bWJlck9mQmxvY2tzWTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLml0ZW1zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLml0ZW1zW2ldO1xyXG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gJ2JsYWNrJztcclxuICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgICAgICBjdHguYXJjKGl0ZW0ueCAqIGZpZWxkU2l6ZVggKyBmaWVsZFNpemVYIC8gMiwgaXRlbS55ICogZmllbGRTaXplWSArIGZpZWxkU2l6ZVkgLyAyLCBmaWVsZFNpemVYIC8gMywgaXRlbS5kcmF3U3RhcnQsIGl0ZW0uZHJhd1N0YXJ0ICsgTWF0aC5QSSAqIDIgKiBpdGVtLndlaWdodCk7XHJcbiAgICAgICAgICAgIGN0eC5maWxsKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLm51bWJlck9mQmxvY2tzWCA9ICh0aGlzLmZpZWxkU2l6ZSAqIDMwKVxyXG4gICAgICAgIGZpZWxkU2l6ZVggPSB3aWR0aCAvIHRoaXMubnVtYmVyT2ZCbG9ja3NYO1xyXG4gICAgICAgIHRoaXMubnVtYmVyT2ZCbG9ja3NZID0gTWF0aC5jZWlsKGhlaWdodCAvIGZpZWxkU2l6ZVgpO1xyXG4gICAgfTtcclxufSIsImltcG9ydCB7IEFuaW1hdGlvbiB9IGZyb20gXCIuL2VuYy9hbmltYXRpb25cIjtcclxuaW1wb3J0IHsgTWFpbk1lbnVWaWV3IH0gZnJvbSBcIi4vbWFpbk1lbnVWaWV3XCI7XHJcbmltcG9ydCB7IEdhbWVWaWV3IH0gZnJvbSBcIi4vZ2FtZVZpZXdcIjtcclxuXHJcblxyXG5leHBvcnQgY2xhc3MgQXBwIHtcclxuICAgIGFuaW1hdGlvbjogQW5pbWF0aW9uO1xyXG4gICAgbWVudTogTWFpbk1lbnVWaWV3O1xyXG4gICAgZ2FtZTogR2FtZVZpZXc7XHJcblxyXG4gICAgcHVibGljIHJ1bigpIHtcclxuICAgICAgICB0aGlzLmFuaW1hdGlvbiA9IEFuaW1hdGlvbi5jcmVhdGVJbkJvZHkoKTtcclxuICAgICAgICB0aGlzLm5ld0dhbWUoKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcHJpdmF0ZSBzdGFydCA9ICgpID0+IHtcclxuICAgICAgICB0aGlzLmdhbWUgPSBuZXcgR2FtZVZpZXcodGhpcy5tZW51LmNvbnRyb2xsZXJzKTtcclxuICAgICAgICB0aGlzLm1lbnUuaGlkZSgpO1xyXG4gICAgICAgIHRoaXMubWVudS5yZXF1ZXN0U3RhcnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0aGlzLnN0YXJ0KTtcclxuICAgICAgICB0aGlzLm1lbnUgPSBudWxsO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuYW5pbWF0aW9uLmFkZFZpZXcodGhpcy5nYW1lKTtcclxuICAgICAgICB0aGlzLmdhbWUucmVxdWVzdE5ld0dhbWUuYWRkRXZlbnRMaXN0ZW5lcih0aGlzLm5ld0dhbWUpO1xyXG4gICAgICAgIHRoaXMuZ2FtZS5zdGFydCgpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBwcml2YXRlIG5ld0dhbWUgPSAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5tZW51ID0gbmV3IE1haW5NZW51VmlldygpO1xyXG4gICAgICAgIHRoaXMubWVudS5yZXF1ZXN0U3RhcnQuYWRkRXZlbnRMaXN0ZW5lcih0aGlzLnN0YXJ0KTtcclxuICAgICAgICBpZiAodGhpcy5nYW1lKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ2FtZS5yZXF1ZXN0TmV3R2FtZS5yZW1vdmVFdmVudExpc3RlbmVyKHRoaXMubmV3R2FtZSk7XHJcbiAgICAgICAgICAgIHRoaXMuZ2FtZS5oaWRlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuZ2FtZSA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuYW5pbWF0aW9uLmFkZFZpZXcodGhpcy5tZW51KTtcclxuICAgICAgICB0aGlzLm1lbnUuc2hvdygpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgQXBwIH0gZnJvbSBcIi4vYXBwXCI7XHJcblxyXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgbWFpbiwgZmFsc2UpO1xyXG5cclxuZnVuY3Rpb24gbWFpbigpIHtcclxuICBjb25zdCBhcHAgPSBuZXcgQXBwKCk7XHJcbiAgYXBwLnJ1bigpO1xyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==