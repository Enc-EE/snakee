!function(e){var t={};function n(i){if(t[i])return t[i].exports;var s=t[i]={i:i,l:!1,exports:{}};return e[i].call(s.exports,s,s.exports,n),s.l=!0,s.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)n.d(i,s,function(t){return e[t]}.bind(null,s));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);var i,s,a=function(){function e(){var e=this;this.animations=[],this.updates=[],this.resize=function(){console.log("canvas resizing"),e.canvas.width=e.canvas.clientWidth,e.canvas.height=e.canvas.clientHeight},this.isRunning=!1,this.addAnimation=function(t){e.animations.push(t)},this.removeAnimation=function(t){e.animations.splice(e.animations.indexOf(t),1)},this.addUpdate=function(t){e.updates.push(t)},this.removeUpdate=function(t){e.updates.splice(e.updates.indexOf(t),1)},this.addAnimatable=function(t){e.updates.push(t.update),e.animations.push(t.draw)},this.removeAnimatable=function(t){e.updates.splice(e.updates.indexOf(t.update),1),e.animations.splice(e.animations.indexOf(t.draw),1)},this.addView=function(t){e.addAnimatable(t),t.width=e.width,t.height=e.height},this.removeView=function(t){e.removeAnimatable(t)},this.fps=40,this.fpsInterval=1e3/this.fps,this.animate=function(){e.isRunning&&requestAnimationFrame(e.animate);var t=Date.now(),n=t-e.lastFrameTime;if(n>e.fpsInterval){e.lastFrameTime=t;for(var i=n/1e3,s=0,a=e.updates;s<a.length;s++){(0,a[s])(i)}e.ctx.clearRect(0,0,e.canvas.width,e.canvas.height);for(var o=0,r=e.animations;o<r.length;o++){(0,r[o])(e.ctx,e.canvas.width,e.canvas.height)}}}}return Object.defineProperty(e.prototype,"width",{get:function(){return this.canvas.width},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"height",{get:function(){return this.canvas.height},enumerable:!0,configurable:!0}),e.createInBody=function(){document.body.parentElement.style.height="100%",document.body.style.height="100%",document.body.style.margin="0",document.body.style.overflow="hidden";var t=document.createElement("canvas");document.body.appendChild(t),t.style.width="100%",t.style.height="100%";var n=new e;return n.canvas=t,n.ctx=t.getContext("2d"),document.addEventListener("keyup",function(e){80==e.keyCode&&n.playPause(),console.log(e.keyCode)}),n.startAnimation(),n.resize(),window.addEventListener("resize",n.resize),n},e.prototype.startAnimation=function(){console.log("start animation"),this.isRunning=!0,this.lastFrameTime=Date.now(),this.animate()},e.prototype.stopAnimation=function(){console.log("stop animation"),this.isRunning=!1},e.prototype.playPause=function(){this.isRunning?this.stopAnimation():this.startAnimation()},e}(),o=function(){return function(){var e=this;this.animations=[],this.updates=[],this.isVisible=!0,this.update=function(t){if(e.isVisible)for(var n=0,i=e.updates;n<i.length;n++)(0,i[n])(t)},this.draw=function(t,n,i){if(e.isVisible)for(var s=0,a=e.animations;s<a.length;s++)(0,a[s])(t,n,i)},this.show=function(){e.isVisible=!0},this.hide=function(){e.isVisible=!1},this.addAnimation=function(t){e.animations.push(t)},this.removeAnimation=function(t){e.animations.splice(e.animations.indexOf(t),1)},this.addUpdate=function(t){e.updates.push(t)},this.removeUpdate=function(t){e.updates.splice(e.updates.indexOf(t),1)},this.addAnimatable=function(t){e.updates.push(t.update),e.animations.push(t.draw)},this.removeAnimatable=function(t){e.updates.splice(e.updates.indexOf(t.update),1),e.animations.splice(e.animations.indexOf(t.draw),1)}}}();!function(e){e.start="start",e.left="left",e.up="up",e.right="right",e.down="down"}(i||(i={})),function(e){e.keyboard="keyboard",e.gamepad="gamepad"}(s||(s={}));var r=function(){return function(){var e=this;this.listeners=[],this.addEventListener=function(t){if(!t||e.listeners.indexOf(t)>=0)throw"listener already added";e.listeners.push(t)},this.dispatchEvent=function(t){for(var n=0;n<e.listeners.length;n++)(0,e.listeners[n])(t)},this.removeEventListener=function(t){if(!t||e.listeners.indexOf(t)<0)throw"listener not found";e.listeners.splice(e.listeners.indexOf(t),1)}}}(),d=function(){return function(){var e=this;this.listeners=[],this.addEventListener=function(t){if(!t||e.listeners.indexOf(t)>=0)throw"listener already added";e.listeners.push(t)},this.dispatchEvent=function(t,n){for(var i=0;i<e.listeners.length;i++)(0,e.listeners[i])(t,n)},this.removeEventListener=function(t){if(!t||e.listeners.indexOf(t)<0)throw"listener not found";e.listeners.splice(e.listeners.indexOf(t),1)}}}(),c=function(){return function(e,t,n,a,o,r){var c=this;this.name=e,this.type=s.keyboard,this.signal=new d,this.xAxes=0,this.yAxes=0,this.start=!1,document.addEventListener("keydown",function(e){e.keyCode==n&&(c.xAxes=-1,c.signal.dispatchEvent(c,i.left)),e.keyCode==t&&(c.yAxes=-1,c.signal.dispatchEvent(c,i.up)),e.keyCode==o&&(c.xAxes=1,c.signal.dispatchEvent(c,i.right)),e.keyCode==a&&(c.yAxes=1,c.signal.dispatchEvent(c,i.down)),13==e.keyCode&&(c.start=!0,c.signal.dispatchEvent(c,i.start)),e.keyCode==r&&(c.a=!0)}),document.addEventListener("keyup",function(e){e.keyCode==n&&(c.xAxes=-1)&&(c.xAxes=0),e.keyCode==t&&(c.yAxes=-1)&&(c.yAxes=0),e.keyCode==o&&(c.xAxes=1)&&(c.xAxes=0),e.keyCode==a&&(c.yAxes=1)&&(c.yAxes=0),13==e.keyCode&&(c.start=!1),e.keyCode==r&&(c.a=!1)})}}(),l=function(){function e(){var e=this;this.gamepads=[],this.scangamepads=function(){console.log("scanning gamepads");for(var t=navigator.getGamepads?navigator.getGamepads():[],n=0;n<t.length;n++)t[n]&&(console.log("scanned gamepad: "+t[n].index+"/"+t[n].id),!(t[n].index in e.gamepads)&&t[n].buttons.length>=16&&(e.gamepads[t[n].index]=t[n],e.scannedGamepad.dispatchEvent(t[n])))},this.scannedGamepad=new r,this.reset()}return e.prototype.start=function(){this.gamepadScanner=setInterval(this.scangamepads,500)},e.prototype.stop=function(){clearInterval(this.gamepadScanner)},e.prototype.reset=function(){this.gamepads=[]},e}(),u=function(){function e(e,t){var n=this;this.name=e,this.index=t,this.timeout=.5,this.signalingTimers={},this.signalListener=function(){requestAnimationFrame(n.signalListener);var e=Date.now();n.checkSignal(n.start,i.start,e),n.checkSignal(n.yAxes<-.3,i.up,e),n.checkSignal(n.yAxes>.3,i.down,e),n.checkSignal(n.xAxes<-.3,i.left,e),n.checkSignal(n.xAxes>.3,i.right,e)},this.checkSignal=function(e,t,i){e?n.signalingTimers[t]?(i-n.signalingTimers[t])/1e3>=n.timeout&&n.signal.dispatchEvent(n,t):(n.signalingTimers[t]=Date.now(),n.signal.dispatchEvent(n,t)):n.signalingTimers[t]=void 0},this.signal=new d,this.type=s.gamepad}return Object.defineProperty(e.prototype,"xAxes",{get:function(){return navigator.getGamepads()[this.index].axes[0]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"yAxes",{get:function(){return navigator.getGamepads()[this.index].axes[1]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"start",{get:function(){return navigator.getGamepads()[this.index].buttons[9].pressed},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"a",{get:function(){return navigator.getGamepads()[this.index].buttons[0].pressed},enumerable:!0,configurable:!0}),e.prototype.enableSignals=function(){this.signalListener()},e}(),p=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),h=function(e){function t(){var t=e.call(this)||this;t.options=[],t.controllers=[],t.drawOptions=function(e,n,i){for(var s=i/2-32*t.options.length/2,a=0;a<t.options.length;a++){var o=t.options[a];e.fillStyle="black",e.textAlign="center",e.textBaseline="middle",e.font="22px sans-serif";var r=s+5+32*a;e.fillText(o,n/2,r),a===t.selectedOption&&e.strokeRect(n/2-e.measureText(o).width/2-5,r-11-5,e.measureText(o).width+10,32)}},t.drawControllers=function(e,n,i){for(var a=n/2-(5+35*t.controllers.length)/2,o=0;o<t.controllers.length;o++){var r=a+5+35*o;switch(t.controllers[o].type){case s.gamepad:e.fillStyle="red",e.fillRect(r,i/4,20,20);break;case s.keyboard:e.fillStyle="green",e.fillRect(r,i/4,20,20)}}},t.addController=function(e){e.type==s.gamepad&&e.enableSignals(),e.signal.addEventListener(t.controllerSignal)},t.controllerSignal=function(e,n){if(console.log("signal: "+n),n==i.start)t.controllers.indexOf(e)>=0?t.controllers.splice(t.controllers.indexOf(e),1):t.controllers.push(e);else if(t.controllers.length>0&&t.controllers[0]==e)switch(n){case i.down:t.selectedOption++,t.selectedOption>=t.options.length&&(t.selectedOption=0);break;case i.up:t.selectedOption--,t.selectedOption<0&&(t.selectedOption=t.options.length-1)}},t.options=["Start Game","Controls"],t.selectedOption=0,t.addAnimation(t.drawOptions),t.addAnimation(t.drawControllers);var n=new l;n.scannedGamepad.addEventListener(function(e){t.addController(new u(e.index.toString(),e.index))}),n.start();var a=new c("arrows",38,37,40,39,187);return t.addController(a),t}return p(t,e),t}(o),f=function(){function e(){}return e.prototype.run=function(){this.animation=a.createInBody();var e=new h;this.animation.addView(e)},e}();document.addEventListener("DOMContentLoaded",function(){(new f).run()},!1)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,