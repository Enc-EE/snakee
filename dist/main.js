!function(t){var e={};function n(i){if(e[i])return e[i].exports;var a=e[i]={i:i,l:!1,exports:{}};return t[i].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)n.d(i,a,function(e){return t[e]}.bind(null,a));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=2)}([function(t,e,n){t.exports=n.p+"ea8a77d442cd84a1c20840b411eec697.png"},function(t,e,n){t.exports=n.p+"f6aa7f0421a5ce4cec7cc06690fd335e.png"},function(t,e,n){"use strict";n.r(e);var i,a,s=function(){function t(){var t=this;this.animations=[],this.updates=[],this.resize=function(){console.log("canvas resizing"),t.canvas.width=t.canvas.clientWidth,t.canvas.height=t.canvas.clientHeight},this.isRunning=!1,this.addAnimation=function(e){t.animations.push(e)},this.removeAnimation=function(e){t.animations.splice(t.animations.indexOf(e),1)},this.addUpdate=function(e){t.updates.push(e)},this.removeUpdate=function(e){t.updates.splice(t.updates.indexOf(e),1)},this.addAnimatable=function(e){t.updates.push(e.update),t.animations.push(e.draw)},this.removeAnimatable=function(e){t.updates.splice(t.updates.indexOf(e.update),1),t.animations.splice(t.animations.indexOf(e.draw),1)},this.addView=function(e){t.addAnimatable(e),e.width=t.width,e.height=t.height},this.removeView=function(e){t.removeAnimatable(e)},this.fps=40,this.fpsInterval=1e3/this.fps,this.animate=function(){t.isRunning&&requestAnimationFrame(t.animate);var e=Date.now(),n=e-t.lastFrameTime;if(n>t.fpsInterval){t.lastFrameTime=e;for(var i=n/1e3,a=0,s=t.updates;a<s.length;a++){(0,s[a])(i)}t.ctx.clearRect(0,0,t.canvas.width,t.canvas.height);for(var o=0,r=t.animations;o<r.length;o++){(0,r[o])(t.ctx,t.canvas.width,t.canvas.height)}}}}return Object.defineProperty(t.prototype,"width",{get:function(){return this.canvas.width},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"height",{get:function(){return this.canvas.height},enumerable:!0,configurable:!0}),t.createInBody=function(){document.body.parentElement.style.height="100%",document.body.style.height="100%",document.body.style.margin="0",document.body.style.overflow="hidden";var e=document.createElement("canvas");document.body.appendChild(e),e.style.width="100%",e.style.height="100%";var n=new t;return n.canvas=e,n.ctx=e.getContext("2d"),document.addEventListener("keyup",function(t){80==t.keyCode&&n.playPause(),console.log(t.keyCode)}),n.startAnimation(),n.resize(),window.addEventListener("resize",n.resize),n},t.prototype.startAnimation=function(){console.log("start animation"),this.isRunning=!0,this.lastFrameTime=Date.now(),this.animate()},t.prototype.stopAnimation=function(){console.log("stop animation"),this.isRunning=!1},t.prototype.playPause=function(){this.isRunning?this.stopAnimation():this.startAnimation()},t}(),o=function(){return function(){var t=this;this.animations=[],this.updates=[],this.isVisible=!0,this.update=function(e){if(t.isVisible)for(var n=0,i=t.updates;n<i.length;n++)(0,i[n])(e)},this.draw=function(e,n,i){if(t.isVisible)for(var a=0,s=t.animations;a<s.length;a++)(0,s[a])(e,n,i)},this.show=function(){t.isVisible=!0},this.hide=function(){t.isVisible=!1},this.addAnimation=function(e){t.animations.push(e)},this.removeAnimation=function(e){t.animations.splice(t.animations.indexOf(e),1)},this.addUpdate=function(e){t.updates.push(e)},this.removeUpdate=function(e){t.updates.splice(t.updates.indexOf(e),1)},this.addAnimatable=function(e){t.updates.push(e.update),t.animations.push(e.draw)},this.removeAnimatable=function(e){t.updates.splice(t.updates.indexOf(e.update),1),t.animations.splice(t.animations.indexOf(e.draw),1)}}}();!function(t){t.start="start",t.left="left",t.up="up",t.right="right",t.down="down",t.a="a"}(i||(i={})),function(t){t.keyboard="keyboard",t.gamepad="gamepad"}(a||(a={}));var r,c=function(){return function(){var t=this;this.listeners=[],this.addEventListener=function(e){if(!e||t.listeners.indexOf(e)>=0)throw"listener already added";t.listeners.push(e)},this.dispatchEvent=function(e){for(var n=0;n<t.listeners.length;n++)(0,t.listeners[n])(e)},this.removeEventListener=function(e){if(!e||t.listeners.indexOf(e)<0)throw"listener not found";t.listeners.splice(t.listeners.indexOf(e),1)}}}(),d=function(){return function(){var t=this;this.listeners=[],this.addEventListener=function(e){if(!e||t.listeners.indexOf(e)>=0)throw"listener already added";t.listeners.push(e)},this.dispatchEvent=function(e,n){for(var i=0;i<t.listeners.length;i++)(0,t.listeners[i])(e,n)},this.removeEventListener=function(e){if(!e||t.listeners.indexOf(e)<0)throw"listener not found";t.listeners.splice(t.listeners.indexOf(e),1)}}}(),l=function(){return function(t,e,n,s,o,r){var c=this;this.name=t,this.type=a.keyboard,this.signal=new d,this.xAxes=0,this.yAxes=0,this.start=!1,document.addEventListener("keydown",function(t){t.keyCode==n&&(c.xAxes=-1,c.signal.dispatchEvent(c,i.left)),t.keyCode==e&&(c.yAxes=-1,c.signal.dispatchEvent(c,i.up)),t.keyCode==o&&(c.xAxes=1,c.signal.dispatchEvent(c,i.right)),t.keyCode==s&&(c.yAxes=1,c.signal.dispatchEvent(c,i.down)),13==t.keyCode&&(c.start=!0,c.signal.dispatchEvent(c,i.start)),t.keyCode==r&&(c.a=!0,c.signal.dispatchEvent(c,i.a))}),document.addEventListener("keyup",function(t){t.keyCode==n&&(c.xAxes=-1)&&(c.xAxes=0),t.keyCode==e&&(c.yAxes=-1)&&(c.yAxes=0),t.keyCode==o&&(c.xAxes=1)&&(c.xAxes=0),t.keyCode==s&&(c.yAxes=1)&&(c.yAxes=0),13==t.keyCode&&(c.start=!1),t.keyCode==r&&(c.a=!1)})}}(),u=function(){function t(){var t=this;this.gamepads=[],this.scangamepads=function(){console.log("scanning gamepads");for(var e=navigator.getGamepads?navigator.getGamepads():[],n=0;n<e.length;n++)e[n]&&(console.log("scanned gamepad: "+e[n].index+"/"+e[n].id),!(e[n].index in t.gamepads)&&e[n].buttons.length>=16&&(t.gamepads[e[n].index]=e[n],t.scannedGamepad.dispatchEvent(e[n])))},this.scannedGamepad=new c,this.reset()}return t.prototype.start=function(){this.gamepadScanner=setInterval(this.scangamepads,500)},t.prototype.stop=function(){clearInterval(this.gamepadScanner)},t.prototype.reset=function(){this.gamepads=[]},t}(),p=function(){function t(t,e){var n=this;this.name=t,this.index=e,this.timeout=.5,this.signalingTimers={},this.signalListener=function(){requestAnimationFrame(n.signalListener);var t=Date.now();n.checkSignal(n.start,i.start,t),n.checkSignal(n.a,i.a,t),n.checkSignal(n.yAxes<-.5,i.up,t),n.checkSignal(n.yAxes>.5,i.down,t),n.checkSignal(n.xAxes<-.5,i.left,t),n.checkSignal(n.xAxes>.5,i.right,t)},this.checkSignal=function(t,e,i){t?n.signalingTimers[e]?(i-n.signalingTimers[e])/1e3>=n.timeout&&n.signal.dispatchEvent(n,e):(n.signalingTimers[e]=Date.now(),n.signal.dispatchEvent(n,e)):n.signalingTimers[e]=void 0},this.signal=new d,this.type=a.gamepad}return Object.defineProperty(t.prototype,"xAxes",{get:function(){return navigator.getGamepads()[this.index].axes[0]},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"yAxes",{get:function(){return navigator.getGamepads()[this.index].axes[1]},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"start",{get:function(){return navigator.getGamepads()[this.index].buttons[9].pressed},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"a",{get:function(){return navigator.getGamepads()[this.index].buttons[0].pressed},enumerable:!0,configurable:!0}),t.prototype.enableSignals=function(){this.signalListener()},t}(),h=n(0),f=n.n(h),g=n(1),m=n.n(g),y=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),v=function(t){function e(e){var n=t.call(this)||this;n.start=e,n.options=[],n.controllers=[],n.drawOptions=function(t,e,i){if(!(n.controllers.length<=0))for(var a=i/2-32*n.options.length/2,s=0;s<n.options.length;s++){var o=n.options[s];t.fillStyle="black",t.textAlign="center",t.textBaseline="middle",t.font="22px sans-serif";var r=a+5+32*s;t.fillText(o,e/2,r),s===n.selectedOption&&t.strokeRect(e/2-t.measureText(o).width/2-5,r-11-5,t.measureText(o).width+10,32)}},n.drawControllers=function(t,e,i){for(var s=e/2-(15+75*n.controllers.length)/2,o=0;o<n.controllers.length;o++){var r=s+15+75*o;switch(n.controllers[o].type){case a.gamepad:t.fillStyle="red",t.font="60px FontAwesome",t.fillText("",r,i/4);break;case a.keyboard:t.fillStyle="green",t.font="60px FontAwesome",t.fillText("",r,i/4)}}},n.addController=function(t){t.type==a.gamepad&&t.enableSignals(),t.signal.addEventListener(n.controllerSignal)},n.controllerSignal=function(t,e){if(console.log("signal: "+e),e==i.start)n.controllers.indexOf(t)>=0?n.controllers.splice(n.controllers.indexOf(t),1):n.controllers.push(t);else if(n.controllers.length>0&&n.controllers[0]==t)switch(e){case i.down:n.selectedOption++,n.selectedOption>=n.options.length&&(n.selectedOption=0);break;case i.up:n.selectedOption--,n.selectedOption<0&&(n.selectedOption=n.options.length-1);break;case i.a:switch(n.selectedOption){case 0:n.gamepadScanner.stop(),n.start();break;case 1:n.showControls=!n.showControls}}},n.options=["Start Game","Show / Hide Controls"],n.selectedOption=0,n.showControls=!0,n.controls_gamepad_image=new Image,n.controls_gamepad_image.src=f.a,n.controls_keyboard_image=new Image,n.controls_keyboard_image.src=m.a,n.addAnimation(function(t,e,i){if(n.showControls){var a=e/3,s=a/n.controls_gamepad_image.naturalWidth*n.controls_gamepad_image.naturalHeight;t.drawImage(n.controls_gamepad_image,a-a/2,3*i/4-s/2,a,s),s=a/n.controls_keyboard_image.naturalWidth*n.controls_keyboard_image.naturalHeight,t.drawImage(n.controls_keyboard_image,2*a-a/2,3*i/4-s/2,a,s)}}),n.addAnimation(n.drawOptions),n.addAnimation(n.drawControllers),n.gamepadScanner=new u,n.gamepadScanner.scannedGamepad.addEventListener(function(t){n.addController(new p(t.index.toString(),t.index))}),n.gamepadScanner.start();var s=new l("arrows",38,37,40,39,32);return n.addController(s),n}return y(e,t),e}(o);!function(t){t[t.up=0]="up",t[t.right=1]="right",t[t.down=2]="down",t[t.left=3]="left"}(r||(r={}));var x=function(){return function(t,e,n){var a=this;this.fieldWidth=t,this.fieldHeight=e,this.controller=n,this.parts=[],this.controllerSignal=function(t,e){switch(e){case i.up:a.direction!=r.down&&(a.direction=r.up);break;case i.right:a.direction!=r.left&&(a.direction=r.right);break;case i.down:a.direction!=r.up&&(a.direction=r.down);break;case i.left:a.direction!=r.right&&(a.direction=r.left)}},this.tick=function(){var t=a.parts[a.parts.length-1];switch(a.direction){case r.up:a.parts.push({x:t.x,y:t.y-1});break;case r.right:a.parts.push({x:t.x+1,y:t.y});break;case r.down:a.parts.push({x:t.x,y:t.y+1});break;case r.left:a.parts.push({x:t.x-1,y:t.y})}a.parts.shift()},this.update=function(t){},this.draw=function(t,e,n){for(var i=0;i<a.parts.length;i++){var s=a.parts[i];t.fillStyle="black",t.fillRect(e/a.fieldHeight*s.x,n/a.fieldHeight*s.y,10,10)}},this.direction=r.right,this.parts=[{x:3,y:5},{x:4,y:5},{x:5,y:5}],n.signal.addEventListener(this.controllerSignal)}}(),w=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),b=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.snakes=[],e.fpsInterval=300,e}return w(e,t),e.prototype.start=function(t){for(var e=this,n=0;n<t.length;n++){var i=t[n],a=new x(150,100,i);this.addAnimatable(a),this.snakes.push(a)}this.lastFrameTime=Date.now(),this.addUpdate(function(t){var n=Date.now();if(n-e.lastFrameTime>e.fpsInterval){e.lastFrameTime=n;for(var i=0;i<e.snakes.length;i++){e.snakes[i].tick()}}})},e}(o),k=function(){function t(){var t=this;this.start=function(){t.menu.hide(),t.game.show(),t.game.start(t.menu.controllers)}}return t.prototype.run=function(){this.animation=s.createInBody(),this.menu=new v(this.start),this.animation.addView(this.menu),this.game=new b,this.animation.addView(this.game),this.game.hide()},t}();document.addEventListener("DOMContentLoaded",function(){(new k).run()},!1)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,