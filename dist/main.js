!function(e){var t={};function n(i){if(t[i])return t[i].exports;var a=t[i]={i:i,l:!1,exports:{}};return e[i].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(i,a,function(t){return e[t]}.bind(null,a));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=2)}([function(e,t,n){e.exports=n.p+"ea8a77d442cd84a1c20840b411eec697.png"},function(e,t,n){e.exports=n.p+"f6aa7f0421a5ce4cec7cc06690fd335e.png"},function(e,t,n){"use strict";n.r(t);var i,a,s=function(){function e(){var e=this;this.animations=[],this.updates=[],this.resize=function(){console.log("canvas resizing"),e.canvas.width=e.canvas.clientWidth,e.canvas.height=e.canvas.clientHeight},this.isRunning=!1,this.addAnimation=function(t){e.animations.push(t)},this.removeAnimation=function(t){e.animations.splice(e.animations.indexOf(t),1)},this.addUpdate=function(t){e.updates.push(t)},this.removeUpdate=function(t){e.updates.splice(e.updates.indexOf(t),1)},this.addAnimatable=function(t){e.updates.push(t.update),e.animations.push(t.draw)},this.removeAnimatable=function(t){e.updates.splice(e.updates.indexOf(t.update),1),e.animations.splice(e.animations.indexOf(t.draw),1)},this.addView=function(t){e.addAnimatable(t),t.width=e.width,t.height=e.height},this.removeView=function(t){e.removeAnimatable(t)},this.fps=40,this.fpsInterval=1e3/this.fps,this.animate=function(){e.isRunning&&requestAnimationFrame(e.animate);var t=Date.now(),n=t-e.lastFrameTime;if(n>e.fpsInterval){e.lastFrameTime=t;for(var i=n/1e3,a=0,s=e.updates;a<s.length;a++){(0,s[a])(i)}e.ctx.clearRect(0,0,e.canvas.width,e.canvas.height);for(var r=0,o=e.animations;r<o.length;r++){(0,o[r])(e.ctx,e.canvas.width,e.canvas.height)}}}}return Object.defineProperty(e.prototype,"width",{get:function(){return this.canvas.width},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"height",{get:function(){return this.canvas.height},enumerable:!0,configurable:!0}),e.createInBody=function(){document.body.parentElement.style.height="100%",document.body.style.height="100%",document.body.style.margin="0",document.body.style.overflow="hidden";var t=document.createElement("canvas");document.body.appendChild(t),t.style.width="100%",t.style.height="100%";var n=new e;return n.canvas=t,n.ctx=t.getContext("2d"),document.addEventListener("keyup",function(e){80==e.keyCode&&n.playPause(),console.log(e.keyCode)}),n.startAnimation(),n.resize(),window.addEventListener("resize",n.resize),n},e.prototype.startAnimation=function(){console.log("start animation"),this.isRunning=!0,this.lastFrameTime=Date.now(),this.animate()},e.prototype.stopAnimation=function(){console.log("stop animation"),this.isRunning=!1},e.prototype.playPause=function(){this.isRunning?this.stopAnimation():this.startAnimation()},e}(),r=function(){return function(){var e=this;this.animations=[],this.updates=[],this.isVisible=!0,this.update=function(t){if(e.isVisible)for(var n=0,i=e.updates;n<i.length;n++)(0,i[n])(t)},this.draw=function(t,n,i){if(e.isVisible)for(var a=0,s=e.animations;a<s.length;a++)(0,s[a])(t,n,i)},this.show=function(){e.isVisible=!0},this.hide=function(){e.isVisible=!1},this.addAnimation=function(t){e.animations.push(t)},this.removeAnimation=function(t){e.animations.splice(e.animations.indexOf(t),1)},this.addUpdate=function(t){e.updates.push(t)},this.removeUpdate=function(t){e.updates.splice(e.updates.indexOf(t),1)},this.addAnimatable=function(t){e.updates.push(t.update),e.animations.push(t.draw)},this.removeAnimatable=function(t){e.updates.splice(e.updates.indexOf(t.update),1),e.animations.splice(e.animations.indexOf(t.draw),1)}}}();!function(e){e.start="start",e.left="left",e.up="up",e.right="right",e.down="down",e.a="a"}(i||(i={})),function(e){e.keyboard="keyboard",e.gamepad="gamepad"}(a||(a={}));var o,l=function(){return function(){var e=this;this.listeners=[],this.addEventListener=function(t){if(!t||e.listeners.indexOf(t)>=0)throw"listener already added";e.listeners.push(t)},this.dispatchEvent=function(){for(var t=0;t<e.listeners.length;t++)(0,e.listeners[t])()},this.removeEventListener=function(t){if(!t||e.listeners.indexOf(t)<0)throw"listener not found";e.listeners.splice(e.listeners.indexOf(t),1)}}}(),c=function(){return function(){var e=this;this.listeners=[],this.addEventListener=function(t){if(!t||e.listeners.indexOf(t)>=0)throw"listener already added";e.listeners.push(t)},this.dispatchEvent=function(t){for(var n=0;n<e.listeners.length;n++)(0,e.listeners[n])(t)},this.removeEventListener=function(t){if(!t||e.listeners.indexOf(t)<0)throw"listener not found";e.listeners.splice(e.listeners.indexOf(t),1)}}}(),d=function(){return function(){var e=this;this.listeners=[],this.addEventListener=function(t){if(!t||e.listeners.indexOf(t)>=0)throw"listener already added";e.listeners.push(t)},this.dispatchEvent=function(t,n){for(var i=0;i<e.listeners.length;i++)(0,e.listeners[i])(t,n)},this.removeEventListener=function(t){if(!t||e.listeners.indexOf(t)<0)throw"listener not found";e.listeners.splice(e.listeners.indexOf(t),1)}}}(),h=function(){return function(e,t,n,s,r,o){var l=this;this.name=e,this.type=a.keyboard,this.signal=new d,this.xAxes=0,this.yAxes=0,this.start=!1,document.addEventListener("keydown",function(e){e.keyCode==n&&(l.xAxes=-1,l.signal.dispatchEvent(l,i.left)),e.keyCode==t&&(l.yAxes=-1,l.signal.dispatchEvent(l,i.up)),e.keyCode==r&&(l.xAxes=1,l.signal.dispatchEvent(l,i.right)),e.keyCode==s&&(l.yAxes=1,l.signal.dispatchEvent(l,i.down)),13==e.keyCode&&(l.start=!0,l.signal.dispatchEvent(l,i.start)),e.keyCode==o&&(l.a=!0,l.signal.dispatchEvent(l,i.a))}),document.addEventListener("keyup",function(e){e.keyCode==n&&(l.xAxes=-1)&&(l.xAxes=0),e.keyCode==t&&(l.yAxes=-1)&&(l.yAxes=0),e.keyCode==r&&(l.xAxes=1)&&(l.xAxes=0),e.keyCode==s&&(l.yAxes=1)&&(l.yAxes=0),13==e.keyCode&&(l.start=!1),e.keyCode==o&&(l.a=!1)})}}(),u=function(){function e(){var e=this;this.gamepads=[],this.scangamepads=function(){console.log("scanning gamepads");for(var t=navigator.getGamepads?navigator.getGamepads():[],n=0;n<t.length;n++)t[n]&&(console.log("scanned gamepad: "+t[n].index+"/"+t[n].id),!(t[n].index in e.gamepads)&&t[n].buttons.length>=16&&(e.gamepads[t[n].index]=t[n],e.scannedGamepad.dispatchEvent(t[n])))},this.scannedGamepad=new c,this.reset()}return e.prototype.start=function(){this.gamepadScanner=setInterval(this.scangamepads,500)},e.prototype.stop=function(){clearInterval(this.gamepadScanner)},e.prototype.reset=function(){this.gamepads=[]},e}(),p=function(){function e(e,t){var n=this;this.name=e,this.index=t,this.timeout=.5,this.signalingTimers={},this.signalListener=function(){requestAnimationFrame(n.signalListener);var e=Date.now();n.checkSignal(n.start,i.start,e),n.checkSignal(n.a,i.a,e),n.checkSignal(n.yAxes<-.5,i.up,e),n.checkSignal(n.yAxes>.5,i.down,e),n.checkSignal(n.xAxes<-.5,i.left,e),n.checkSignal(n.xAxes>.5,i.right,e)},this.checkSignal=function(e,t,i){e?n.signalingTimers[t]?(i-n.signalingTimers[t])/1e3>=n.timeout&&n.signal.dispatchEvent(n,t):(n.signalingTimers[t]=Date.now(),n.signal.dispatchEvent(n,t)):n.signalingTimers[t]=void 0},this.signal=new d,this.type=a.gamepad}return Object.defineProperty(e.prototype,"xAxes",{get:function(){return navigator.getGamepads()[this.index].axes[0]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"yAxes",{get:function(){return navigator.getGamepads()[this.index].axes[1]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"start",{get:function(){return navigator.getGamepads()[this.index].buttons[9].pressed},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"a",{get:function(){return navigator.getGamepads()[this.index].buttons[0].pressed},enumerable:!0,configurable:!0}),e.prototype.enableSignals=function(){this.signalListener()},e}(),f=n(0),m=n.n(f),g=n(1),y=n.n(g),v=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),x=function(e){function t(t){var n=e.call(this)||this;n.start=t,n.options=[],n.controllers=[],n.drawOptions=function(e,t,i){if(!(n.controllers.length<=0))for(var a=i/2-32*n.options.length/2,s=0;s<n.options.length;s++){var r=n.options[s];e.fillStyle="black",e.textAlign="center",e.textBaseline="middle",e.font="22px sans-serif";var o=a+5+32*s;e.fillText(r,t/2,o),s===n.selectedOption&&e.strokeRect(t/2-e.measureText(r).width/2-5,o-11-5,e.measureText(r).width+10,32)}},n.drawControllers=function(e,t,i){for(var s=t/2-(15+75*n.controllers.length)/2,r=0;r<n.controllers.length;r++){e.fillStyle="hsl("+r/n.controllers.length*360+",100%, 40%)";var o=s+15+75*r;switch(n.controllers[r].type){case a.gamepad:e.font="60px FontAwesome",e.fillText("",o,i/4);break;case a.keyboard:e.font="60px FontAwesome",e.fillText("",o,i/4)}}},n.addController=function(e){e.type==a.gamepad&&e.enableSignals(),e.signal.addEventListener(n.controllerSignal)},n.controllerSignal=function(e,t){if(console.log("signal: "+t),t==i.start)n.controllers.indexOf(e)>=0?n.controllers.splice(n.controllers.indexOf(e),1):n.controllers.push(e);else if(n.controllers.length>0&&n.controllers[0]==e)switch(t){case i.down:n.selectedOption++,n.selectedOption>=n.options.length&&(n.selectedOption=0);break;case i.up:n.selectedOption--,n.selectedOption<0&&(n.selectedOption=n.options.length-1);break;case i.a:switch(n.selectedOption){case 0:n.gamepadScanner.stop(),n.start();break;case 1:n.showControls=!n.showControls}}},n.options=["Start Game","Show / Hide Controls"],n.selectedOption=0,n.showControls=!0,n.controls_gamepad_image=new Image,n.controls_gamepad_image.src=m.a,n.controls_keyboard_image=new Image,n.controls_keyboard_image.src=y.a,n.addAnimation(function(e,t,i){if(n.showControls){var a=t/3,s=a/n.controls_gamepad_image.naturalWidth*n.controls_gamepad_image.naturalHeight;e.drawImage(n.controls_gamepad_image,a-a/2,3*i/4-s/2,a,s),s=a/n.controls_keyboard_image.naturalWidth*n.controls_keyboard_image.naturalHeight,e.drawImage(n.controls_keyboard_image,2*a-a/2,3*i/4-s/2,a,s)}}),n.addAnimation(n.drawOptions),n.addAnimation(n.drawControllers),n.gamepadScanner=new u,n.gamepadScanner.scannedGamepad.addEventListener(function(e){n.addController(new p(e.index.toString(),e.index))}),n.gamepadScanner.start();var s=new h("arrows",38,37,40,39,32);return n.addController(s),n}return v(t,e),t}(r);!function(e){e[e.up=0]="up",e[e.right=1]="right",e[e.down=2]="down",e[e.left=3]="left"}(o||(o={}));var w=function(){function e(e,t,n){var a=this;this.fieldSize=e,this.controller=t,this.playerNumber=n,this.parts=[],this.finish=function(){a.color="hsl("+360*a.playerNumber+",100%, 80%)",a.isDone=!0},this.controllerSignal=function(e,t){switch(t){case i.up:a.direction!=o.down&&(a.nextDirection=o.up);break;case i.right:a.direction!=o.left&&(a.nextDirection=o.right);break;case i.down:a.direction!=o.up&&(a.nextDirection=o.down);break;case i.left:a.direction!=o.right&&(a.nextDirection=o.left)}},this.tick=function(){if(!a.isDone){a.direction=a.nextDirection;var e=a.parts[a.parts.length-1];switch(a.direction){case o.up:a.parts.push({x:e.x,y:e.y-1});break;case o.right:a.parts.push({x:e.x+1,y:e.y});break;case o.down:a.parts.push({x:e.x,y:e.y+1});break;case o.left:a.parts.push({x:e.x-1,y:e.y})}a.parts.shift()}},this.update=function(e){},this.draw=function(e,t,n){for(var i=t/(30*a.fieldSize),s=n/i,r=n/(s=Math.ceil(s)),o=0;o<a.parts.length;o++){var l=a.parts[o];e.fillStyle=a.color,e.fillRect(l.x*i,l.y*r,i,r)}},this.direction=o.right,this.nextDirection=this.direction,this.isDone=!1,this.color="hsl("+360*n+",100%, 40%)";for(var s=0;s<7;s++)this.parts.push({x:3+s,y:1+Math.round(20*n)});t.signal.addEventListener(this.controllerSignal),this.iMDone=new l,this.iMDone.addEventListener(this.finish)}return Object.defineProperty(e.prototype,"headPart",{get:function(){return this.parts[this.parts.length-1]},enumerable:!0,configurable:!0}),e}(),b=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),k=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.snakes=[],t.fpsInterval=300,t.items=[],t.update=function(e){var n=Date.now();if(n-t.lastFrameTime>t.fpsInterval){if(t.lastFrameTime=n,t.items.length<t.maxItems)if(0==t.currentItemSpawnDelay){t.currentItemSpawnDelay=t.itemSpawnerDelay;var i=!0,a=20;do{i=!0;for(var s=Math.floor(Math.random()*t.numberOfBlocksX),r=Math.floor(Math.random()*t.numberOfBlocksY),o=0;o<t.snakes.length&&i;o++)for(var l=t.snakes[o],c=0;c<l.parts.length&&i;c++){(f=l.parts[c]).x==s&&f.y==r&&(i=!1)}a--,i&&t.items.push({x:s,y:r})}while(!i&&a>0)}else t.currentItemSpawnDelay--;for(o=0;o<t.snakes.length;o++){(l=t.snakes[o]).tick()}for(o=0;o<t.snakes.length;o++){var d=t.snakes[o];(d.headPart.x<0||d.headPart.y<0||d.headPart.x>=t.numberOfBlocksX||d.headPart.y>=t.numberOfBlocksY)&&d.iMDone.dispatchEvent();for(c=0;c<t.snakes.length;c++)for(var h=t.snakes[c],u=d!=h?h.parts.length:h.parts.length-1,p=0;p<u;p++){var f;(f=h.parts[p]).x==d.headPart.x&&f.y==d.headPart.y&&d.iMDone.dispatchEvent()}}}},t.animation=function(e,n,i){for(var a=n/t.numberOfBlocksX,s=i/t.numberOfBlocksY,r=0;r<t.items.length;r++){var o=t.items[r];e.fillStyle="black",e.beginPath(),e.arc(o.x*a+a/2,o.y*s+s/2,a/3,0,2*Math.PI),e.fill()}t.numberOfBlocksX=30*t.fieldSize,a=n/t.numberOfBlocksX,t.numberOfBlocksY=Math.ceil(i/a)},t}return b(t,e),t.prototype.start=function(e){this.fieldSize=1,this.itemSpawnerDelay=5,this.currentItemSpawnDelay=this.itemSpawnerDelay,this.maxItems=3;for(var t=0;t<e.length;t++){var n=e[t],i=new w(this.fieldSize,n,t/e.length);this.addAnimatable(i),this.snakes.push(i)}this.lastFrameTime=Date.now(),this.addUpdate(this.update),this.addAnimation(this.animation)},t}(r),O=function(){function e(){var e=this;this.start=function(){e.menu.hide(),e.game.show(),e.game.start(e.menu.controllers)}}return e.prototype.run=function(){this.animation=s.createInBody(),this.menu=new x(this.start),this.animation.addView(this.menu),this.game=new k,this.animation.addView(this.game),this.game.hide()},e}();document.addEventListener("DOMContentLoaded",function(){(new O).run()},!1)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,