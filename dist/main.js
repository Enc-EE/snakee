!function(e){var t={};function n(i){if(t[i])return t[i].exports;var a=t[i]={i:i,l:!1,exports:{}};return e[i].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(i,a,function(t){return e[t]}.bind(null,a));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=3)}([function(e,t,n){e.exports=n.p+"ea8a77d442cd84a1c20840b411eec697.png"},function(e,t,n){e.exports=n.p+"f6aa7f0421a5ce4cec7cc06690fd335e.png"},function(e,t,n){e.exports=n.p+"d0d8e021d0d023da65f4d5b5118f44dc.png"},function(e,t,n){"use strict";n.r(t);var i,a,s=function(){function e(){var e=this;this.animations=[],this.updates=[],this.resize=function(){console.log("canvas resizing"),e.canvas.width=e.canvas.clientWidth,e.canvas.height=e.canvas.clientHeight},this.isRunning=!1,this.addAnimation=function(t){e.animations.push(t)},this.removeAnimation=function(t){e.animations.splice(e.animations.indexOf(t),1)},this.addUpdate=function(t){e.updates.push(t)},this.removeUpdate=function(t){e.updates.splice(e.updates.indexOf(t),1)},this.addAnimatable=function(t){e.updates.push(t.update),e.animations.push(t.draw)},this.removeAnimatable=function(t){e.updates.splice(e.updates.indexOf(t.update),1),e.animations.splice(e.animations.indexOf(t.draw),1)},this.addView=function(t){e.addAnimatable(t),t.width=e.width,t.height=e.height},this.removeView=function(t){e.removeAnimatable(t)},this.fps=40,this.fpsInterval=1e3/this.fps,this.animate=function(){e.isRunning&&requestAnimationFrame(e.animate);var t=Date.now(),n=t-e.lastFrameTime;if(n>e.fpsInterval){e.lastFrameTime=t;for(var i=n/1e3,a=0,s=e.updates;a<s.length;a++){(0,s[a])(i)}e.ctx.clearRect(0,0,e.canvas.width,e.canvas.height);for(var r=0,o=e.animations;r<o.length;r++){(0,o[r])(e.ctx,e.canvas.width,e.canvas.height)}}}}return Object.defineProperty(e.prototype,"width",{get:function(){return this.canvas.width},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"height",{get:function(){return this.canvas.height},enumerable:!0,configurable:!0}),e.createInBody=function(){document.body.parentElement.style.height="100%",document.body.style.height="100%",document.body.style.margin="0",document.body.style.overflow="hidden";var t=document.createElement("canvas");document.body.appendChild(t),t.style.width="100%",t.style.height="100%";var n=new e;return n.canvas=t,n.ctx=t.getContext("2d"),document.addEventListener("keyup",function(e){80==e.keyCode&&n.playPause(),console.log(e.keyCode)}),n.startAnimation(),n.resize(),window.addEventListener("resize",n.resize),n},e.prototype.startAnimation=function(){console.log("start animation"),this.isRunning=!0,this.lastFrameTime=Date.now(),this.animate()},e.prototype.stopAnimation=function(){console.log("stop animation"),this.isRunning=!1},e.prototype.playPause=function(){this.isRunning?this.stopAnimation():this.startAnimation()},e}(),r=function(){return function(){var e=this;this.animations=[],this.updates=[],this.isVisible=!0,this.update=function(t){if(e.isVisible)for(var n=0,i=e.updates;n<i.length;n++)(0,i[n])(t)},this.draw=function(t,n,i){if(e.isVisible)for(var a=0,s=e.animations;a<s.length;a++)(0,s[a])(t,n,i)},this.show=function(){e.isVisible=!0},this.hide=function(){e.isVisible=!1},this.addAnimation=function(t){e.animations.push(t)},this.removeAnimation=function(t){e.animations.splice(e.animations.indexOf(t),1)},this.addUpdate=function(t){e.updates.push(t)},this.removeUpdate=function(t){e.updates.splice(e.updates.indexOf(t),1)},this.addAnimatable=function(t){e.updates.push(t.update),e.animations.push(t.draw)},this.removeAnimatable=function(t){e.updates.splice(e.updates.indexOf(t.update),1),e.animations.splice(e.animations.indexOf(t.draw),1)}}}();!function(e){e.start="start",e.left="left",e.up="up",e.right="right",e.down="down",e.a="a"}(i||(i={})),function(e){e.keyboard="keyboard",e.gamepad="gamepad"}(a||(a={}));var o,l=function(){return function(){var e=this;this.listeners=[],this.addEventListener=function(t){if(!t||e.listeners.indexOf(t)>=0)throw"listener already added";e.listeners.push(t)},this.dispatchEvent=function(){for(var t=0;t<e.listeners.length;t++)(0,e.listeners[t])()},this.removeEventListener=function(t){if(!t||e.listeners.indexOf(t)<0)throw"listener not found";e.listeners.splice(e.listeners.indexOf(t),1)}}}(),c=function(){return function(){var e=this;this.listeners=[],this.addEventListener=function(t){if(!t||e.listeners.indexOf(t)>=0)throw"listener already added";e.listeners.push(t)},this.dispatchEvent=function(t){for(var n=0;n<e.listeners.length;n++)(0,e.listeners[n])(t)},this.removeEventListener=function(t){if(!t||e.listeners.indexOf(t)<0)throw"listener not found";e.listeners.splice(e.listeners.indexOf(t),1)}}}(),d=function(){return function(){var e=this;this.listeners=[],this.addEventListener=function(t){if(!t||e.listeners.indexOf(t)>=0)throw"listener already added";e.listeners.push(t)},this.dispatchEvent=function(t,n){for(var i=0;i<e.listeners.length;i++)(0,e.listeners[i])(t,n)},this.removeEventListener=function(t){if(!t||e.listeners.indexOf(t)<0)throw"listener not found";e.listeners.splice(e.listeners.indexOf(t),1)}}}(),h=function(){return function(e,t,n,s,r,o){var l=this;this.name=e,this.type=a.keyboard,this.signal=new d,this.xAxes=0,this.yAxes=0,this.start=!1,document.addEventListener("keydown",function(e){e.keyCode==n&&(l.xAxes=-1,l.signal.dispatchEvent(l,i.left)),e.keyCode==t&&(l.yAxes=-1,l.signal.dispatchEvent(l,i.up)),e.keyCode==r&&(l.xAxes=1,l.signal.dispatchEvent(l,i.right)),e.keyCode==s&&(l.yAxes=1,l.signal.dispatchEvent(l,i.down)),13==e.keyCode&&(l.start=!0,l.signal.dispatchEvent(l,i.start)),e.keyCode==o&&(l.a=!0,l.signal.dispatchEvent(l,i.a))}),document.addEventListener("keyup",function(e){e.keyCode==n&&(l.xAxes=-1)&&(l.xAxes=0),e.keyCode==t&&(l.yAxes=-1)&&(l.yAxes=0),e.keyCode==r&&(l.xAxes=1)&&(l.xAxes=0),e.keyCode==s&&(l.yAxes=1)&&(l.yAxes=0),13==e.keyCode&&(l.start=!1),e.keyCode==o&&(l.a=!1)})}}(),u=function(){function e(){var e=this;this.gamepads=[],this.scangamepads=function(){for(var t=navigator.getGamepads?navigator.getGamepads():[],n=0;n<t.length;n++)t[n]&&!(t[n].index in e.gamepads)&&t[n].buttons.length>=16&&(e.gamepads[t[n].index]=t[n],e.scannedGamepad.dispatchEvent(t[n]))},this.scannedGamepad=new c,this.reset()}return e.prototype.start=function(){this.gamepadScanner=setInterval(this.scangamepads,500)},e.prototype.stop=function(){clearInterval(this.gamepadScanner)},e.prototype.reset=function(){this.gamepads=[]},e}(),p=function(){function e(e,t){var n=this;this.name=e,this.index=t,this.timeout=.5,this.signalingTimers={},this.signalListener=function(){requestAnimationFrame(n.signalListener);var e=Date.now();n.checkSignal(n.start,i.start,e),n.checkSignal(n.a,i.a,e),n.checkSignal(n.up,i.up,e),n.checkSignal(n.right,i.right,e),n.checkSignal(n.left,i.left,e),n.checkSignal(n.down,i.down,e),n.checkSignal(n.yAxes<-.5,i.up,e),n.checkSignal(n.yAxes>.5,i.down,e),n.checkSignal(n.xAxes<-.5,i.left,e),n.checkSignal(n.xAxes>.5,i.right,e)},this.checkSignal=function(e,t,i){e?n.signalingTimers[t]?(i-n.signalingTimers[t])/1e3>=n.timeout&&n.signal.dispatchEvent(n,t):(n.signalingTimers[t]=Date.now(),n.signal.dispatchEvent(n,t)):n.signalingTimers[t]=void 0},this.signal=new d,this.type=a.gamepad}return Object.defineProperty(e.prototype,"xAxes",{get:function(){return navigator.getGamepads()[this.index].axes[0]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"yAxes",{get:function(){return navigator.getGamepads()[this.index].axes[1]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"start",{get:function(){return navigator.getGamepads()[this.index].buttons[9].pressed},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"a",{get:function(){return navigator.getGamepads()[this.index].buttons[0].pressed},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"up",{get:function(){return navigator.getGamepads()[this.index].buttons[12].pressed},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"right",{get:function(){return navigator.getGamepads()[this.index].buttons[15].pressed},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"down",{get:function(){return navigator.getGamepads()[this.index].buttons[13].pressed},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"left",{get:function(){return navigator.getGamepads()[this.index].buttons[14].pressed},enumerable:!0,configurable:!0}),e.prototype.enableSignals=function(){this.signalListener()},e}(),f=n(0),m=n.n(f),g=n(1),y=n.n(g),v=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),x=function(e){function t(){var t=e.call(this)||this;t.options=[],t.controllers=[],t.drawOptions=function(e,n,i){if(!(t.controllers.length<=0))for(var a=i/2-32*t.options.length/2,s=0;s<t.options.length;s++){var r=t.options[s];e.fillStyle="black",e.textAlign="center",e.textBaseline="middle",e.font="22px sans-serif";var o=a+5+32*s;e.fillText(r,n/2,o),s===t.selectedOption&&e.strokeRect(n/2-e.measureText(r).width/2-5,o-11-5,e.measureText(r).width+10,32)}},t.drawControllers=function(e,n,i){for(var s=n/2-(15+75*t.controllers.length)/2,r=0;r<t.controllers.length;r++){e.fillStyle="hsl("+r/t.controllers.length*360+",100%, 40%)";var o=s+15+75*r;switch(t.controllers[r].type){case a.gamepad:e.font="60px FontAwesome",e.fillText("",o,i/4);break;case a.keyboard:e.font="60px FontAwesome",e.fillText("",o,i/4)}}},t.addController=function(e){e.type==a.gamepad&&e.enableSignals(),e.signal.addEventListener(t.controllerSignal)},t.controllerSignal=function(e,n){if(n==i.start)console.log("signal"),t.controllers.indexOf(e)>=0?t.controllers.splice(t.controllers.indexOf(e),1):t.controllers.push(e);else if(t.controllers.length>0&&t.controllers[0]==e)switch(n){case i.down:t.selectedOption++,t.selectedOption>=t.options.length&&(t.selectedOption=0);break;case i.up:t.selectedOption--,t.selectedOption<0&&(t.selectedOption=t.options.length-1);break;case i.a:switch(t.selectedOption){case 0:t.gamepadScanner.stop(),t.requestStart.dispatchEvent();break;case 1:t.showControls=!t.showControls}}},t.requestStart=new l,t.options=["Start Game","Show / Hide Controls"],t.selectedOption=0,t.showControls=!0,t.controls_gamepad_image=new Image,t.controls_gamepad_image.src=m.a,t.controls_keyboard_image=new Image,t.controls_keyboard_image.src=y.a,t.addAnimation(function(e,n,i){if(t.showControls){var a=n/3,s=a/t.controls_gamepad_image.naturalWidth*t.controls_gamepad_image.naturalHeight;e.drawImage(t.controls_gamepad_image,a-a/2,3*i/4-s/2,a,s),s=a/t.controls_keyboard_image.naturalWidth*t.controls_keyboard_image.naturalHeight,e.drawImage(t.controls_keyboard_image,2*a-a/2,3*i/4-s/2,a,s)}}),t.addAnimation(t.drawOptions),t.addAnimation(t.drawControllers),t.gamepadScanner=new u,t.gamepadScanner.scannedGamepad.addEventListener(function(e){console.log("gamepadScanner"),t.addController(new p(e.index.toString(),e.index))}),t.gamepadScanner.start();var n=new h("arrows",38,37,40,39,32);return t.addController(n),t}return v(t,e),t}(r);!function(e){e[e.up=0]="up",e[e.right=1]="right",e[e.down=2]="down",e[e.left=3]="left"}(o||(o={}));var w=function(){function e(e,t,n){var a=this;this.fieldSize=e,this.controller=t,this.playerNumber=n,this.parts=[],this.collectedSomething=function(e){a.points+=2*e,a.addPart=!0},this.finish=function(){a.isDone=!0},this.controllerSignal=function(e,t){switch(t){case i.up:a.direction!=o.down&&(a.nextDirection=o.up);break;case i.right:a.direction!=o.left&&(a.nextDirection=o.right);break;case i.down:a.direction!=o.up&&(a.nextDirection=o.down);break;case i.left:a.direction!=o.right&&(a.nextDirection=o.left)}},this.tick=function(){if(!a.isDone){a.direction=a.nextDirection;var e=a.parts[a.parts.length-1];switch(a.direction){case o.up:a.parts.push({x:e.x,y:e.y-1});break;case o.right:a.parts.push({x:e.x+1,y:e.y});break;case o.down:a.parts.push({x:e.x,y:e.y+1});break;case o.left:a.parts.push({x:e.x-1,y:e.y})}a.addPart?a.addPart=!1:a.parts.shift()}},this.update=function(e){},this.draw=function(e,t,n){var i=t/(30*a.fieldSize),s=n/i,r=n/(s=Math.ceil(s)),o=30/a.parts.length;e.fillStyle=a.color;for(var l=0;l<a.parts.length;l++){a.isDone?e.fillStyle="hsl("+360*a.playerNumber+",100%, 30%)":e.fillStyle="hsl("+360*a.playerNumber+",100%, "+(30+o*l)+"%)";var c=a.parts[l];e.fillRect(c.x*i,c.y*r,i,r)}e.textAlign="start",e.textBaseline="top",e.font="60px sans-serif",e.fillStyle="hsl("+360*a.playerNumber+",100%, 50%)",e.fillText(a.points.toString(),t*a.playerNumber,10)},this.direction=o.right,this.points=0,this.nextDirection=this.direction,this.isDone=!1,this.color="hsl("+360*n+",100%, 30%)";for(var s=0;s<7;s++)this.parts.push({x:3+s,y:1+Math.round(20*n)});t.signal.addEventListener(this.controllerSignal),this.iMDone=new l,this.collected=new c,this.collected.addEventListener(this.collectedSomething),this.iMDone.addEventListener(this.finish)}return Object.defineProperty(e.prototype,"headPart",{get:function(){return this.parts[this.parts.length-1]},enumerable:!0,configurable:!0}),e}(),b=n(2),k=n.n(b),S=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),O=function(e){function t(t){var n=e.call(this)||this;return n.controllers=t,n.snakes=[],n.fpsInterval=300,n.items=[],n.snakeIsDone=function(){var e=n.snakes.map(function(e){return e.isDone}).filter(function(e){return e}).length;(0==e||n.snakes.length>1&&1==e)&&(n.gameFinished=!0,setTimeout(function(){n.allowNewGame=!0},3e3),n.snakes=n.snakes.sort(function(e,t){return e.isDone?t.points-e.points:-1}),n.addAnimation(function(e,t,i){e.fillStyle="rgba(255, 255, 255, 0.8)",e.fillRect(0,0,t,i);for(var a=0;a<n.snakes.length;a++){var s=n.snakes[a];e.textAlign="center",e.textBaseline="top",e.fillStyle="hsl("+360*s.playerNumber+",100%, 50%)";var r=t*s.playerNumber+t*(1/n.snakes.length)/2;if(s.isDone){var o=t/n.snakes.length/4,l=o/n.deathImage.naturalWidth*n.deathImage.naturalHeight;e.drawImage(n.deathImage,r-o/2,i/2-80-l-20,o,l)}e.font="50px sans-serif",e.fillText("Score: "+s.points.toString(),r,i/2-80),e.font=60+20*(n.snakes.length-a)+"px sans-serif",e.fillStyle="hsl("+360*s.playerNumber+",100%, 50%)",e.fillText((a+1).toString()+".",r,i/2)}n.allowNewGame&&(e.textAlign="center",e.textBaseline="top",e.fillStyle="black",e.font="50px sans-serif",e.fillText("Press a button to start a new game.",t/2,i/4*3))}))},n.update=function(e){if(!n.gameFinished){var t=Date.now();if(t-n.lastFrameTime>n.fpsInterval){if(n.lastFrameTime=t,n.items.length<n.maxItems)if(0==n.currentItemSpawnDelay){n.currentItemSpawnDelay=n.itemSpawnerDelay;var i=!0,a=20;do{i=!0;for(var s=Math.floor(Math.random()*n.numberOfBlocksX),r=Math.floor(Math.random()*n.numberOfBlocksY),o=0;o<n.snakes.length&&i;o++)for(var l=n.snakes[o],c=0;c<l.parts.length&&i;c++){(f=l.parts[c]).x==s&&f.y==r&&(i=!1)}a--,i&&n.items.push({x:s,y:r,weight:(Math.floor(2*Math.random())+1)/2,drawStart:Math.random()*Math.PI*2})}while(!i&&a>0)}else n.currentItemSpawnDelay--;for(o=0;o<n.snakes.length;o++){(l=n.snakes[o]).tick()}for(o=0;o<n.snakes.length;o++){var d=n.snakes[o];(d.headPart.x<0||d.headPart.y<0||d.headPart.x>=n.numberOfBlocksX||d.headPart.y>=n.numberOfBlocksY)&&d.iMDone.dispatchEvent();for(c=0;c<n.snakes.length;c++)for(var h=n.snakes[c],u=d!=h?h.parts.length:h.parts.length-1,p=0;p<u;p++){var f;(f=h.parts[p]).x==d.headPart.x&&f.y==d.headPart.y&&d.iMDone.dispatchEvent()}var m=[];for(c=0;c<n.items.length;c++){var g=n.items[c];g.x==d.headPart.x&&g.y==d.headPart.y&&(m.push(c),d.collected.dispatchEvent(g.weight))}for(var y=0;y<m.length;y++){var v=m[y];n.items.splice(v,1)}}}}},n.animation=function(e,t,i){for(var a=t/n.numberOfBlocksX,s=i/n.numberOfBlocksY,r=0;r<n.items.length;r++){var o=n.items[r];e.fillStyle="black",e.beginPath(),e.arc(o.x*a+a/2,o.y*s+s/2,a/3,o.drawStart,o.drawStart+2*Math.PI*o.weight),e.fill()}n.numberOfBlocksX=30*n.fieldSize,a=t/n.numberOfBlocksX,n.numberOfBlocksY=Math.ceil(i/a)},n.requestNewGame=new l,n}return S(t,e),t.prototype.start=function(){var e=this;this.deathImage=new Image,this.deathImage.src=k.a,this.fieldSize=1,this.itemSpawnerDelay=5,this.currentItemSpawnDelay=this.itemSpawnerDelay,this.maxItems=3;for(var t=0;t<this.controllers.length;t++){var n=this.controllers[t],a=new w(this.fieldSize,n,t/this.controllers.length);this.addAnimatable(a),a.iMDone.addEventListener(this.snakeIsDone),this.snakes.push(a)}this.lastFrameTime=Date.now(),this.addUpdate(this.update),this.addAnimation(this.animation);for(t=0;t<this.controllers.length;t++){(n=this.controllers[t]).signal.addEventListener(function(t,n){e.gameFinished&&e.allowNewGame&&(n!=i.a&&n!=i.start||e.requestNewGame.dispatchEvent())})}},t}(r),A=function(){function e(){var e=this;this.start=function(){console.log("start"),e.game=new O(e.menu.controllers),e.menu.hide(),e.menu.requestStart.removeEventListener(e.start),e.menu=null,e.animation.addView(e.game),e.game.requestNewGame.addEventListener(e.newGame),e.game.start()},this.newGame=function(){console.log("new"),e.menu=new x,e.menu.requestStart.addEventListener(e.start),e.game&&(e.game.requestNewGame.removeEventListener(e.newGame),e.game.hide(),e.game=null),e.animation.addView(e.menu),e.menu.show()}}return e.prototype.run=function(){this.animation=s.createInBody(),this.newGame()},e}();document.addEventListener("DOMContentLoaded",function(){(new A).run()},!1)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,